{"version":3,"sources":["FormContext.ts","components/TimeSetter.tsx","utils.ts","components/steps/TimeStep.tsx","components/DateSetter.tsx","components/steps/DateStep.tsx","components/AvailableDeskSelect.tsx","images/floor_plan_Ordina_B2.jpg","components/steps/DeskStep.tsx","routeUrls.ts","components/BookingStepper.tsx","pages/BookingPage.tsx","components/CheckinDeskList.tsx","pages/CheckinPage.tsx","pages/LoginPage.tsx","pages/UserPage.tsx","pages/RegisterPage.tsx","components/BookingList.tsx","components/DeskList.tsx","pages/AdminPage.tsx","images/ordina_logo.png","components/TopBar.tsx","theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FormContext","React","createContext","TimeSetter","title","type","useContext","startTime","startTimeValue","setStartTimeValue","endTime","endTimeValue","setEndTimeValue","Box","Typography","variant","gutterBottom","LocalizationProvider","dateAdapter","AdapterDateFns","TimePicker","value","onChange","newValue","renderInput","params","TextField","isBetween","min","max","getUnixTime","date","time","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getTime","isFutureTime","dateValue","now","isDeskSelected","selectedDesk","isEndTimeAfterStart","endtimeValue","unixStartTime","getDateFromNumber","toLocaleString","TimeStep","Stack","spacing","Alert","severity","Divider","isPastDate","DateSetter","setDateValue","StaticDatePicker","orientation","displayStaticWrapperAs","openTo","shouldDisableDate","DateStep","AvailableDeskSelect","useState","currentDeskList","setCurrentDeskList","desk","setSelectedDesk","bookingSucces","useEffect","setDeskList","a","fetch","process","bookingList","json","jsonBookingList","bookings","bookingsAtTime","filter","booking","unixEndTime","isBetweenStart","start_time","isBetweenEnd","end_time","deskListData","deskListJson","availableDesks","deskList","find","booked_desk","desk_id","FormControl","sx","m","minWidth","InputLabel","Select","label","event","target","map","MenuItem","DeskStep","imgOpen","setImgOpen","Grid","container","item","xs","md","className","onClick","src","img","alt","Modal","open","onClose","BOOKING_ROUTE_URL","CHECKIN_ROUTE_URL","USER_ROUTE_URL","LOGIN_ROUTE_URL","REGISTER_ROUTE_URL","ADMIN_ROUTE_URL","BookingStepper","history","useHistory","stepComponents","steps","activeStep","setActiveStep","setBookingSucces","setPrevSelectedDesk","prevSelectedDesk","handleBooking","user","sessionStorage","getItem","jsonUser","JSON","parse","method","headers","body","stringify","booking_id","user_name","name","bookingData","push","isBookingPossible","isLastStep","length","hasStepError","index","Card","elevation","width","CardContent","minHeight","Stepper","nonLinear","Step","StepButton","color","CardActions","justifyContent","Button","disabled","BookingPage","initialStartTime","setHours","initialEndTime","store","Provider","p","pt","Snackbar","anchorOrigin","vertical","horizontal","action","IconButton","autoHideDuration","message","isBookedNow","CheckinDeskList","deskId","isBookedByUser","isDeskUser","setDeskUser","desks","desksJson","allDesks","deskIndex","findIndex","getDeskForBooking","currentBookings","currentBookedDesks","bookedDesk","currentBooking","nearbyDesks","otherDesk","otherdDeskIndex","isCurrentlyBooked","distance","List","style","maxHeight","overflow","ListItem","CheckinPage","document","location","search","substr","currentDeskState","setCurrentDeskState","setOpen","setInitialDeskState","deskData","deskJson","deskState","handleToggleChecked","CardHeader","LoginPage","window","Notification","requestPermission","logInFail","setLogInFail","userName","setUserName","password","setPassword","getUser","userCheck","userCheckJson","isValid","role","userJson","setItem","reload","textAlign","alignItems","href","UserPage","userDeskList","setUserDeskList","recentBooking","setRecentBooking","allUserDesks","allFutureUserDesks","sort","desk1","desk2","userDesk","ListItemText","primary","secondary","RegisterPage","confirmPassword","setConfirmPassword","createUser","data","isUserCreated","BookingList","setBookingList","sortVariant","getBookingList","booking1","booking2","localeCompare","height","ListItemButton","DeskList","getDeskList","jsonDeskList","desk_state","AdminPage","setSortVariant","padding","TopBar","anchorEl","setAnchorEl","Boolean","AppBar","position","Toolbar","gap","component","flexGrow","fontSize","size","currentTarget","Menu","id","MenuListProps","Link","clear","theme","createTheme","palette","main","light","dark","App","isUser","isAdmin","checkNotifications","notificationJson","notifications","permission","notification","join","timer","setInterval","clearInterval","ThemeProvider","CssBaseline","path","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bc8f38f4.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const FormContext = React.createContext<any>(null);","import { FC, useContext } from \"react\";\nimport { Typography, Box, TextField } from \"@mui/material\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport { LocalizationProvider, TimePicker } from \"@mui/lab\";\nimport { FormContext } from \"../FormContext\";\n\ntype Props = {\n  title: string;\n  type: \"Start\" | \"End\";\n};\n\nexport const TimeSetter: FC<Props> = ({ title, type }) => {\n  const {\n    startTime: [startTimeValue, setStartTimeValue],\n  } = useContext(FormContext);\n  const {\n    endTime: [endTimeValue, setEndTimeValue],\n  } = useContext(FormContext);\n  return (\n    <Box>\n      <Typography variant=\"body1\" gutterBottom>\n        {title}\n      </Typography>\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <TimePicker\n          value={type === \"Start\" ? startTimeValue : endTimeValue}\n          onChange={(newValue) => {\n            if (!newValue) {\n              return;\n            }\n            if (type === \"Start\") {\n              setStartTimeValue(newValue);\n            }\n            if (type === \"End\") {\n              setEndTimeValue(newValue);\n            }\n          }}\n          renderInput={(params) => <TextField {...params} />}\n        />\n      </LocalizationProvider>\n    </Box>\n  );\n};\n","export function isBetween(value: number, min: number, max: number) {\n  return value >= min && value <= max;\n}\n\nexport function getUnixTime(date: Date, time: Date) {\n  return (\n    new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n      time.getHours(),\n      time.getMinutes()\n    ).getTime() / 1000\n  );\n}\n\nexport const isFutureTime = (dateValue:Date, startTimeValue:Date) =>{\n  const unixStartTime = getUnixTime(dateValue, startTimeValue);\n  return unixStartTime - (Date.now() / 1000) <= 0;\n}\nexport const isDeskSelected =(selectedDesk:string) =>{\n  return selectedDesk === \"\"\n}\nexport const isEndTimeAfterStart = (dateValue:Date, startTimeValue:Date, endtimeValue:Date) =>{\n  const unixStartTime = getUnixTime(dateValue, startTimeValue);\n  const unixEndTime = getUnixTime(dateValue, endtimeValue);\n  return unixEndTime - unixStartTime <= 0;\n}\n\nexport const getDateFromNumber = (time: number | undefined) => {\n  if (time) {\n    const date = new Date(time * 1000);\n    return date.toLocaleString();\n  }\n  return \"no time found\";\n};\n\n","import { FC, useContext } from \"react\";\nimport { Stack, Alert, Divider } from \"@mui/material\";\nimport { TimeSetter } from \"../TimeSetter\";\nimport { isFutureTime, isEndTimeAfterStart } from \"../../utils\";\nimport { FormContext } from \"../../FormContext\";\n\nexport const TimeStep: FC = () => {\n  const {\n    date: [dateValue],\n    startTime: [startTimeValue],\n    endTime: [endTimeValue],\n  } = useContext(FormContext);\n\n  return (\n    <Stack spacing={2}>\n      <TimeSetter\n        title={\"Please select the start time for the booking\"}\n        type={\"Start\"}\n      />\n      {isFutureTime(dateValue, startTimeValue) ? (\n        <Alert severity=\"warning\">Check if the time has passed</Alert>\n      ) : null}\n      <Divider />\n      <TimeSetter\n        title={\"Please select the end time for the booking\"}\n        type={\"End\"}\n      />\n      {isEndTimeAfterStart(dateValue, startTimeValue, endTimeValue) ? (\n        <Alert severity=\"warning\">\n          The end time is earlier than the start time\n        </Alert>\n      ) : null}\n    </Stack>\n  );\n};\n","import { useContext, FC } from \"react\";\nimport { TextField } from \"@mui/material\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport { LocalizationProvider, StaticDatePicker } from \"@mui/lab\";\nimport { FormContext } from \"../FormContext\";\nimport { getUnixTime } from \"../utils\";\n\nconst UNIX_DAY = 86400;\n\nconst isPastDate = (date: Date) => {\n  return getUnixTime(date, date) < Date.now() / 1000 - UNIX_DAY;\n};\n\nexport const DateSetter: FC = () => {\n  const {\n    date: [dateValue, setDateValue],\n  } = useContext(FormContext);\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <StaticDatePicker<Date>\n        orientation=\"portrait\"\n        displayStaticWrapperAs=\"desktop\"\n        openTo=\"day\"\n        value={dateValue}\n        shouldDisableDate={isPastDate}\n        onChange={(newValue) => {\n          if (newValue) {\n            setDateValue(newValue);\n          }\n        }}\n        renderInput={(params) => <TextField {...params} />}\n      />\n    </LocalizationProvider>\n  );\n};\n","import { FC } from \"react\";\nimport { Box, Typography } from \"@mui/material\";\nimport { DateSetter } from \"../DateSetter\";\n\nexport const DateStep: FC = () => {\n  return (\n    <Box>\n      <Typography variant=\"body1\" gutterBottom>\n        Please select the date for the booking\n      </Typography>\n      <DateSetter />\n    </Box>\n  );\n};\n","import {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n} from \"@mui/material\";\nimport { useState, FC, useEffect, useContext } from \"react\";\nimport { DeskType, Booking } from \"../types\";\nimport { isBetween, getUnixTime } from \"../utils\";\nimport { FormContext } from \"../FormContext\";\n\nexport const AvailableDeskSelect: FC = () => {\n  const [currentDeskList, setCurrentDeskList] = useState<DeskType[]>([]);\n  const {\n    desk: [selectedDesk, setSelectedDesk],\n  } = useContext(FormContext);\n  const {\n    startTime: [startTimeValue],\n  } = useContext(FormContext);\n  const {\n    endTime: [endTimeValue],\n  } = useContext(FormContext);\n  const {\n    date: [dateValue],\n  } = useContext(FormContext);\n  const {\n    bookingSucces: [bookingSucces],\n  } = useContext(FormContext);\n\n  const handleChange = (event: SelectChangeEvent) => {\n    setSelectedDesk(event.target.value);\n  };\n\n  useEffect(() => {\n    const setDeskList = async () => {\n      const bookingList = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/bookinglist`\n      );\n      const jsonBookingList = await bookingList.json();\n      const bookings: Booking[] = jsonBookingList.bookingList;\n\n      const bookingsAtTime = bookings.filter((booking: Booking) => {\n        const unixStartTime = getUnixTime(dateValue, startTimeValue);\n        const unixEndTime = getUnixTime(dateValue, endTimeValue);\n        const isBetweenStart = isBetween(\n          booking.start_time,\n          unixStartTime,\n          unixEndTime\n        );\n        const isBetweenEnd = isBetween(\n          booking.end_time,\n          unixStartTime,\n          unixEndTime\n        );\n        return isBetweenStart || isBetweenEnd;\n      });\n\n      const deskListData = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/desk/list`\n      );\n      const deskListJson = await deskListData.json();\n\n      const availableDesks = deskListJson.deskList.filter((desk: DeskType) => {\n        const isBooked = bookingsAtTime.find(\n          (booking: Booking) => booking.booked_desk === desk.desk_id\n        );\n        return !isBooked;\n      });\n      setCurrentDeskList(availableDesks);\n    };\n    setDeskList();\n  }, [bookingSucces, endTimeValue, startTimeValue, dateValue]);\n\n  return (\n    <FormControl sx={{ m: 1, minWidth: 120 }}>\n      <InputLabel>Desk</InputLabel>\n      <Select value={selectedDesk} label=\"Desk\" onChange={handleChange}>\n        {currentDeskList.map((desk) => (\n          <MenuItem key={desk.desk_id} value={desk.desk_id}>\n            {desk.desk_id}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/floor_plan_Ordina_B2.c52b3cd2.jpg\";","import { FC, useContext, useState } from \"react\";\nimport { Typography, Alert, Grid, Modal } from \"@mui/material\";\nimport { AvailableDeskSelect } from \"../AvailableDeskSelect\";\nimport { isDeskSelected } from \"../../utils\";\nimport { FormContext } from \"../../FormContext\";\nimport img from \"../../images/floor_plan_Ordina_B2.jpg\";\nimport \"./DeskStep.css\";\n\nexport const DeskStep: FC = () => {\n  const [imgOpen, setImgOpen] = useState(false);\n  const {\n    desk: [selectedDesk],\n  } = useContext(FormContext);\n\n  return (\n    <div>\n      <Grid container spacing={1}>\n        <Grid item xs={12} md={4}>\n          <Typography variant=\"body1\" gutterBottom>\n            Please select one of the available desks:\n          </Typography>\n          <AvailableDeskSelect />\n          {isDeskSelected(selectedDesk) ? (\n            <Alert severity=\"warning\">There is no desk selected</Alert>\n          ) : (\n            \"\"\n          )}\n        </Grid>\n        <Grid item xs={12} md={8}>\n          <img\n            className=\"deskstep-image\"\n            onClick={() => setImgOpen(true)}\n            src={img}\n            alt=\"Layout\"\n          />\n          <Typography variant=\"caption\">Click image to enlarge</Typography>\n        </Grid>\n      </Grid>\n      <Modal open={imgOpen} onClose={() => setImgOpen(false)}>\n        <img className=\"deskstep-modal-content\" alt=\"zoomedLayout\" src={img} />\n      </Modal>\n    </div>\n  );\n};\n","export const BOOKING_ROUTE_URL = \"/desks/booking\"\nexport const CHECKIN_ROUTE_URL = \"/desks/checkin/\"\nexport const USER_ROUTE_URL = \"/desks/user\"\nexport const LOGIN_ROUTE_URL = \"/desks/login\"\nexport const REGISTER_ROUTE_URL = \"/desks/register\"\nexport const ADMIN_ROUTE_URL = \"/desks/admin\"","import {\n  Stepper,\n  Step,\n  StepButton,\n  Typography,\n  Button,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n} from \"@mui/material\";\nimport { FC, useContext } from \"react\";\nimport { TimeStep } from \"../components/steps/TimeStep\";\nimport { DateStep } from \"../components/steps/DateStep\";\nimport { DeskStep } from \"../components/steps/DeskStep\";\nimport { FormContext } from \"../FormContext\";\nimport {\n  isDeskSelected,\n  isEndTimeAfterStart,\n  isFutureTime,\n  getUnixTime,\n} from \"../utils\";\nimport { activeUser } from \"../types\";\nimport { useHistory } from \"react-router-dom\";\nimport { USER_ROUTE_URL } from \"../routeUrls\";\n\nexport const BookingStepper: FC = () => {\n  const history = useHistory();\n  const stepComponents = [<DateStep />, <TimeStep />, <DeskStep />];\n  const steps: string[] = [\n    \"Select booking date\",\n    \"Select booking time\",\n    \"Select desk\",\n  ];\n  const {\n    activeStep: [activeStep, setActiveStep],\n    date: [dateValue],\n    startTime: [startTimeValue],\n    endTime: [endTimeValue],\n    desk: [selectedDesk, setSelectedDesk],\n    bookingSucces: [, setBookingSucces],\n    prevSelectedDesk: [, setPrevSelectedDesk],\n  } = useContext(FormContext);\n\n  const handleBooking = async () => {\n    const user = sessionStorage.getItem(\"activeUser\");\n    if (user) {\n      const jsonUser: activeUser = JSON.parse(user);\n      const bookingData = await fetch(`${process.env.REACT_APP_ROOT_URL}api/book`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\",\n        },\n        body: JSON.stringify({\n          booking_id: `booking ${selectedDesk}.${Date.now()}`,\n          start_time: getUnixTime(dateValue, startTimeValue),\n          end_time: getUnixTime(dateValue, endTimeValue),\n          booked_desk: selectedDesk,\n          user_name: jsonUser.name,\n        }),\n      });\n      const json = await bookingData.json();\n      if (json.booking) {\n        setBookingSucces(true);\n        setPrevSelectedDesk(selectedDesk);\n        setSelectedDesk(\"\");\n      }\n      history.push(USER_ROUTE_URL);\n    }\n  };\n\n  const isBookingPossible = () => {\n    return (\n      isLastStep &&\n      (isDeskSelected(selectedDesk) ||\n        isEndTimeAfterStart(dateValue, startTimeValue, endTimeValue) ||\n        isFutureTime(dateValue, startTimeValue))\n    );\n  };\n\n  const isLastStep = activeStep === steps.length - 1;\n  const handleStep = (step: number) => {\n    setActiveStep(step);\n  };\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n  };\n\n  const hasStepError = (index: number) => {\n    return (\n      (index === 1 && isFutureTime(dateValue, startTimeValue)) ||\n      (index === 1 &&\n        isEndTimeAfterStart(dateValue, startTimeValue, endTimeValue)) ||\n      (index === 2 && isDeskSelected(selectedDesk))\n    );\n  };\n\n  return (\n    <Card\n      elevation={6}\n      className=\"basecard\"\n      sx={{ width: { xs: \"100%\", md: \"900px\" } }}\n    >\n      <CardContent\n        sx={{ minHeight: { xs: \"calc(100vh - 120px)\", md: \"580px\" } }}\n      >\n        <Grid container spacing={5}>\n          <Grid item xs={6} md={12}>\n            <Stepper nonLinear activeStep={activeStep}>\n              {steps.map((label, index) => (\n                <Step key={label}>\n                  <StepButton onClick={() => handleStep(index)}>\n                    <Typography variant=\"body1\">{label}</Typography>\n                    {hasStepError(index) ? (\n                      <Typography variant=\"caption\" color=\"error\">\n                        Missing/ wrong information\n                      </Typography>\n                    ) : null}\n                  </StepButton>\n                </Step>\n              ))}\n            </Stepper>\n          </Grid>\n          <Grid item xs={12}>\n            {stepComponents[activeStep]}\n          </Grid>\n          <Grid item xs={12}></Grid>\n        </Grid>\n      </CardContent>\n      <CardActions sx={{ justifyContent: \"flex-end\" }}>\n        <Button disabled={activeStep === 0} onClick={handleBack}>\n          Back\n        </Button>\n        {isLastStep ? (\n          <Button\n            variant=\"contained\"\n            onClick={handleBooking}\n            disabled={isBookingPossible()}\n            color=\"secondary\"\n          >\n            Book\n          </Button>\n        ) : (\n          <Button\n            variant=\"contained\"\n            onClick={handleNext}\n            disabled={isBookingPossible()}\n          >\n            Next\n          </Button>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n","import { FC, useState } from \"react\";\nimport { Snackbar, IconButton, Box } from \"@mui/material\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { BookingStepper } from \"../components/BookingStepper\";\nimport { FormContext } from \"../FormContext\";\n\nconst UNIX_DAY = 86400 * 1000;\n\nconst BookingPage: FC = () => {\n  const initialStartTime = new Date();\n  initialStartTime.setHours(9, 0, 0, 0);\n  const initialEndTime = new Date();\n  initialEndTime.setHours(17, 0, 0, 0);\n  const [prevSelectedDesk, setPrevSelectedDesk] = useState(\"\");\n  const [activeStep, setActiveStep] = useState(0);\n  const [bookingSucces, setBookingSucces] = useState(false);\n  const [startTimeValue, setStartTimeValue] = useState<Date>(initialStartTime);\n  const [endTimeValue, setEndTimeValue] = useState<Date>(initialEndTime);\n  const [dateValue, setDateValue] = useState<Date>(\n    new Date(Date.now() + UNIX_DAY)\n  );\n  const [selectedDesk, setSelectedDesk] = useState(\"\");\n  const store = {\n    startTime: [startTimeValue, setStartTimeValue],\n    endTime: [endTimeValue, setEndTimeValue],\n    date: [dateValue, setDateValue],\n    desk: [selectedDesk, setSelectedDesk],\n    activeStep: [activeStep, setActiveStep],\n    bookingSucces: [bookingSucces, setBookingSucces],\n    prevSelectedDesk: [prevSelectedDesk, setPrevSelectedDesk],\n  };\n\n  return (\n    <FormContext.Provider value={store}>\n      <Box sx={{ p: { xs: 1, md: 3 }, pt: { xs: 3, md: 3 } }}>\n        <BookingStepper />\n        <Snackbar\n          anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n          open={bookingSucces}\n          action={\n            <IconButton\n              onClick={() => {\n                setBookingSucces(false);\n              }}\n            >\n              <CloseIcon color={\"primary\"} />\n            </IconButton>\n          }\n          autoHideDuration={6000}\n          onClose={() => {\n            setBookingSucces(false);\n          }}\n          message={`Your booking for desk ${prevSelectedDesk} was successful`}\n        />\n      </Box>\n    </FormContext.Provider>\n  );\n};\nexport default BookingPage;\n","import { List, ListItem, Stack, Typography } from \"@mui/material\";\nimport { useState, FC, useEffect, useContext } from \"react\";\nimport { DeskType, Booking } from \"../types\";\nimport { isBetween } from \"../utils\";\nimport { FormContext } from \"../FormContext\";\n\ntype Props = {\n  deskId: string;\n};\nconst OFFSET_AVAILABLE_DESKS = 2;\nconst UNIX_HALF_HOUR = 1800000;\n\nconst isBookedNow = (booking: Booking) => {\n  return isBetween(\n    Date.now() / 1000,\n    booking.start_time - UNIX_HALF_HOUR,\n    booking.end_time\n  );\n};\n\nexport const CheckinDeskList: FC<Props> = ({ deskId }) => {\n  const [currentDeskList, setCurrentDeskList] = useState<DeskType[]>([]);\n  const {\n    isBookedByUser: [isDeskUser, setDeskUser],\n  } = useContext(FormContext);\n\n  useEffect(() => {\n    const setDeskList = async () => {\n      const desks = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/desk/list`\n      );\n      const desksJson = await desks.json();\n      const allDesks: DeskType[] = desksJson.deskList;\n\n      const bookingList = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/bookinglist`\n      );\n      const jsonBookingList = await bookingList.json();\n      const bookings: Booking[] = jsonBookingList.bookingList;\n\n      const deskIndex = allDesks.findIndex((desk) => desk.desk_id === deskId);\n      const getDeskForBooking = (booking: Booking) =>\n        allDesks.find((desk) => desk.desk_id === booking.booked_desk);\n      const currentBookings = bookings.filter(isBookedNow);\n      const currentBookedDesks = currentBookings.map(getDeskForBooking);\n\n      if (\n        currentBookedDesks.find((bookedDesk) => bookedDesk?.desk_id === deskId)\n      ) {\n        const user = sessionStorage.getItem(\"activeUser\");\n        const jsonUser = user ? JSON.parse(user) : null;\n        const currentBooking = currentBookings.find(\n          (booking) => booking.booked_desk === deskId\n        );\n        if (currentBooking?.user_name !== jsonUser.name) {\n          setDeskUser(false);\n        }\n        const nearbyDesks = allDesks.filter((otherDesk, otherdDeskIndex) => {\n          const isCurrentlyBooked = currentBookedDesks.find(\n            (bookedDesk) => bookedDesk?.desk_id === otherDesk.desk_id\n          );\n          const isSameDesk = deskIndex === otherdDeskIndex;\n          const distance = deskIndex - otherdDeskIndex;\n          const isInRange =\n            distance >= -OFFSET_AVAILABLE_DESKS &&\n            distance <= OFFSET_AVAILABLE_DESKS;\n          return !isSameDesk && isInRange && !isCurrentlyBooked;\n        });\n        setCurrentDeskList(nearbyDesks);\n      }\n    };\n    setDeskList();\n  }, [deskId, setDeskUser]);\n\n  return (\n    <>\n      {currentDeskList.length <= 0 || isDeskUser ? (\n        \"\"\n      ) : (\n        <Stack>\n          <Typography>This desk is not available, but these are:</Typography>\n          <List style={{ maxHeight: 200, overflow: \"auto\" }}>\n            {currentDeskList.map((desk) => (\n              <ListItem key={desk.desk_id}>{desk.desk_id}</ListItem>\n            ))}\n          </List>\n        </Stack>\n      )}\n    </>\n  );\n};\n","import {\n  Button,\n  Snackbar,\n  Box,\n  IconButton,\n  Card,\n  CardHeader,\n  CardContent,\n  Divider,\n  Stack,\n} from \"@mui/material\";\nimport { useState, FC, useEffect } from \"react\";\nimport { CheckinDeskList } from \"../components/CheckinDeskList\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { FormContext } from \"../FormContext\";\n\nconst CheckinPage: FC = () => {\n  const deskId = document.location.search.substr(1);\n  const [currentDeskState, setCurrentDeskState] = useState(\"free\");\n  const [open, setOpen] = useState(false);\n  const [isDeskUser, setDeskUser] = useState(true);\n\n  useEffect(() => {\n    const setInitialDeskState = async () => {\n      const deskData = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/desk/${deskId}`\n      );\n      const deskJson = await deskData.json();\n      setCurrentDeskState(deskJson.deskState);\n    };\n    setInitialDeskState();\n  }, [deskId]);\n\n  const handleToggleChecked = async () => {\n    const deskData = await fetch(\n      `${process.env.REACT_APP_ROOT_URL}api/desk/${deskId}`,\n      {\n        method: \"PATCH\",\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\",\n        },\n        body: JSON.stringify({\n          deskState: currentDeskState,\n          deskId: deskId,\n        }),\n      }\n    );\n    const deskJson = await deskData.json();\n    setCurrentDeskState(deskJson.deskState);\n    setOpen(true);\n  };\n\n  const store = {\n    isBookedByUser: [isDeskUser, setDeskUser],\n  };\n\n  return (\n    <FormContext.Provider value={store}>\n      <Box sx={{ p: { xs: 1, md: 3 }, pt: { xs: 3, md: 3 } }}>\n        <Card\n          elevation={6}\n          className=\"basecard\"\n          sx={{ width: { xs: \"100%\", md: \"900px\" } }}\n        >\n          <CardHeader title={`Desk ${deskId}`} />\n          <CardContent>\n            <Stack spacing={2}>\n              <Button\n                variant=\"contained\"\n                sx={{ width: \"200px\" }}\n                color=\"secondary\"\n                disabled={currentDeskState === \"unavailable\" || !isDeskUser}\n                onClick={handleToggleChecked}\n              >\n                {currentDeskState === \"free\" ? \"Check in\" : \"Check out\"}\n              </Button>\n              <Divider />\n              <CheckinDeskList deskId={deskId} />\n            </Stack>\n          </CardContent>\n        </Card>\n        <Snackbar\n          anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n          open={open}\n          autoHideDuration={6000}\n          onClose={() => {\n            setOpen(false);\n          }}\n          action={\n            <IconButton onClick={() => setOpen(false)}>\n              <CloseIcon color={\"primary\"} />\n            </IconButton>\n          }\n          message={currentDeskState === \"free\" ? \"checked out\" : \"checked in\"}\n        />\n      </Box>\n    </FormContext.Provider>\n  );\n};\n\nexport default CheckinPage;\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardActions,\n  Typography,\n  TextField,\n  Stack,\n  Button,\n  Snackbar,\n  IconButton,\n  Box,\n} from \"@mui/material\";\nimport { FC, useState } from \"react\";\nimport { REGISTER_ROUTE_URL } from \"../routeUrls\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n\nconst LoginPage: FC = () => {\n  window.Notification.requestPermission();\n  const [logInFail, setLogInFail] = useState(false);\n  const [userName, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const getUser = async () => {\n    const userCheck = await fetch(\n      `${process.env.REACT_APP_ROOT_URL}api/user/${userName}/${password}`\n    );\n    const userCheckJson = await userCheck.json();\n    const isValidUser: boolean = userCheckJson.isValid;\n    if (isValidUser) {\n      const name = userCheckJson.userName;\n      const role = userCheckJson.role;\n      const userJson = `{\"name\": \"${name}\", \"role\": \"${role}\"}`;\n      sessionStorage.setItem(\"activeUser\", userJson);\n      // eslint-disable-next-line no-restricted-globals\n      location.reload();\n      return;\n    }\n    setLogInFail(true);\n  };\n  const areFieldsEmpty = () => {\n    return userName.length === 0 || password.length === 0;\n  };\n  return (\n    <Box sx={{ p: { xs: 1, md: 3 }, pt: { xs: 3, md: 3 } }}>\n      <Card\n        elevation={6}\n        className=\"basecard\"\n        sx={{ width: { xs: \"100%\", md: \"900px\" } }}\n      >\n        <CardHeader title=\"Sign in\" sx={{ textAlign: \"center\" }} />\n        <CardContent>\n          <Stack alignItems=\"center\" spacing={4}>\n            <TextField\n              label=\"Email address\"\n              onChange={(event) => setUserName(event.target.value)}\n              sx={{ width: { xs: \"90%\", md: \"25rem\" } }}\n            />\n            <TextField\n              label=\"Password\"\n              onChange={(event) => setPassword(event.target.value)}\n              sx={{ width: { xs: \"90%\", md: \"25rem\" } }}\n              type=\"password\"\n            />\n            <Button\n              disabled={areFieldsEmpty()}\n              onClick={getUser}\n              variant=\"contained\"\n            >\n              Sign in\n            </Button>\n          </Stack>\n        </CardContent>\n        <CardActions sx={{ justifyContent: \"flex-end\" }}>\n          <Typography> dont have an account? </Typography>\n          <Button color=\"primary\" href={REGISTER_ROUTE_URL}>\n            {\" \"}\n            Register\n          </Button>\n        </CardActions>\n      </Card>\n      <Snackbar\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n        open={logInFail}\n        action={\n          <IconButton\n            onClick={() => {\n              setLogInFail(false);\n            }}\n          >\n            <CloseIcon color={\"primary\"} />\n          </IconButton>\n        }\n        autoHideDuration={6000}\n        onClose={() => {\n          setLogInFail(false);\n        }}\n        message={`password or username is incorrect`}\n      />\n    </Box>\n  );\n};\n\nexport default LoginPage;\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardActions,\n  Box,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  Stack,\n  Typography,\n} from \"@mui/material\";\nimport { FC, useEffect, useState } from \"react\";\nimport { BOOKING_ROUTE_URL, CHECKIN_ROUTE_URL } from \"../routeUrls\";\nimport { Booking } from \"../types\";\nimport { getDateFromNumber } from \"../utils\";\n\nconst UserPage: FC = () => {\n  const [userDeskList, setUserDeskList] = useState<Booking[]>([]);\n  const [recentBooking, setRecentBooking] = useState<Booking>();\n  const user = sessionStorage.getItem(\"activeUser\");\n\n  useEffect(() => {\n    const setDeskList = async () => {\n      if (user) {\n        const jsonUser = JSON.parse(user);\n        const desks = await fetch(\n          `${process.env.REACT_APP_ROOT_URL}api/user/list/${jsonUser.name}`\n        );\n        const desksJson = await desks.json();\n        const allUserDesks: Booking[] = desksJson.userDeskList;\n        setRecentBooking(allUserDesks[allUserDesks.length - 1]);\n        const allFutureUserDesks = allUserDesks.filter((booking: Booking) => {\n          return booking.end_time > Date.now() / 1000;\n        });\n        allFutureUserDesks.sort((desk1, desk2) => {\n          if (desk1.start_time > desk2.start_time) return 1;\n          if (desk1.start_time < desk2.start_time) return -1;\n          return 0;\n        });\n        setUserDeskList(allFutureUserDesks);\n      }\n    };\n    setDeskList();\n  }, [user]);\n\n  return (\n    <Box sx={{ p: { xs: 1, md: 3 }, pt: { xs: 3, md: 3 } }}>\n      <Card\n        elevation={6}\n        className=\"basecard\"\n        sx={{ width: { xs: \"100%\", md: \"900px\" } }}\n      >\n        <CardHeader\n          title={\n            user ? `bookings for ${JSON.parse(user).name}` : \"No user found\"\n          }\n          sx={{ textAlign: \"center\" }}\n        />\n        <CardContent>\n          {userDeskList.length <= 0 ? (\n            \"You haven't booked any desks\"\n          ) : (\n            <Stack spacing={2}>\n              This is your most recent booking:\n              <Card sx={{ width: { xs: \"50%\" } }}>\n                <CardHeader title={recentBooking?.booked_desk} />\n                <CardContent>\n                  <Typography variant=\"caption\">\n                    {` From: ${getDateFromNumber(\n                      recentBooking?.start_time\n                    )} Till: ${getDateFromNumber(recentBooking?.end_time)}`}\n                  </Typography>\n                </CardContent>\n              </Card>\n              <Typography gutterBottom>These are your booked desks:</Typography>\n              <List style={{ maxHeight: 400, overflow: \"auto\" }}>\n                {userDeskList.map((userDesk) => (\n                  <ListItem key={userDesk.booking_id}>\n                    <ListItemText\n                      primary={userDesk.booked_desk}\n                      secondary={` From: ${getDateFromNumber(\n                        userDesk.start_time\n                      )} Till: ${getDateFromNumber(userDesk.end_time)}`}\n                    />\n                  </ListItem>\n                ))}\n              </List>\n            </Stack>\n          )}\n        </CardContent>\n        <CardActions sx={{ justifyContent: \"space-between\" }}>\n          {userDeskList.length > 0 ? (\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              href={`${CHECKIN_ROUTE_URL}?${userDeskList[0].booked_desk}`}\n            >\n              {`checkin desk ${userDeskList[0].booked_desk}`}\n            </Button>\n          ) : (\n            \"\"\n          )}\n          <Button variant=\"outlined\" href={BOOKING_ROUTE_URL}>\n            Make new booking\n          </Button>\n        </CardActions>\n      </Card>\n    </Box>\n  );\n};\n\nexport default UserPage;\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardActions,\n  TextField,\n  Stack,\n  Button,\n  Box,\n  Typography,\n} from \"@mui/material\";\nimport { FC, useState } from \"react\";\nimport { LOGIN_ROUTE_URL } from \"../routeUrls\";\n\nconst RegisterPage: FC = () => {\n  const [userName, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const createUser = async () => {\n    if (password === confirmPassword) {\n      const data = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/createUser`,\n        {\n          method: \"PATCH\",\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n          },\n          body: JSON.stringify({\n            name: userName,\n            password,\n            role: \"user\",\n          }),\n        }\n      );\n      const json = await data.json();\n      if (json.isUserCreated) {\n        //TODO create alert when account is made\n        const json = `{\"name\": \"${userName}\", \"role\": \"user\"}`;\n        sessionStorage.setItem(\"activeUser\", json);\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n        return;\n      }\n    }\n    //TODO alert password doesnt match\n  };\n  const areFieldsEmpty = () => {\n    return (\n      userName.length === 0 ||\n      password.length === 0 ||\n      confirmPassword.length === 0\n    );\n  };\n  return (\n    <Box sx={{ p: { xs: 1, md: 3 }, pt: { xs: 3, md: 3 } }}>\n      <Card\n        elevation={6}\n        className=\"basecard\"\n        sx={{ width: { xs: \"100%\", md: \"900px\" } }}\n      >\n        <CardHeader title=\"Register\" sx={{ textAlign: \"center\" }} />\n        <CardContent>\n          <Stack alignItems=\"center\" spacing={4}>\n            <TextField\n              label=\"Email address\"\n              onChange={(event) => setUserName(event.target.value)}\n              sx={{ width: \"25rem\" }}\n            />\n            <TextField\n              label=\"Password\"\n              onChange={(event) => setPassword(event.target.value)}\n              sx={{ width: \"25rem\" }}\n              type=\"password\"\n            />\n            <TextField\n              label=\"Confirm password\"\n              onChange={(event) => setConfirmPassword(event.target.value)}\n              sx={{ width: \"25rem\" }}\n              type=\"password\"\n            />\n            <Button\n              disabled={areFieldsEmpty()}\n              onClick={createUser}\n              variant=\"contained\"\n            >\n              Register\n            </Button>\n          </Stack>\n        </CardContent>\n        <CardActions sx={{ justifyContent: \"flex-end\" }}>\n          <Typography> already an account? </Typography>\n          <Button color=\"primary\" href={LOGIN_ROUTE_URL}>\n            {\" \"}\n            Log in\n          </Button>\n        </CardActions>\n      </Card>\n    </Box>\n  );\n};\n\nexport default RegisterPage;\n","import { List, ListItemButton, Stack, Typography } from \"@mui/material\";\nimport { useState, FC, useEffect, useContext } from \"react\";\nimport { Booking } from \"../types\";\nimport { getDateFromNumber } from \"../utils\";\nimport { FormContext } from \"../FormContext\";\n\nexport const BookingList: FC = () => {\n  const [bookingList, setBookingList] = useState<Booking[]>([]);\n\n  const {\n    sortVariant: [sortVariant],\n  } = useContext(FormContext);\n\n  useEffect(() => {\n    const getBookingList = async () => {\n      const bookingList = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/bookinglist`\n      );\n      const jsonBookingList = await bookingList.json();\n      const bookings: Booking[] = jsonBookingList.bookingList;\n      bookings.sort((booking1, booking2) => {\n        switch (sortVariant) {\n          case \"name\": {\n            return booking1.user_name.localeCompare(booking2.user_name);\n          }\n          case \"nTime\": {\n            if (booking1.start_time > booking2.start_time) return 1;\n            if (booking1.start_time < booking2.start_time) return -1;\n            return 0;\n          }\n          case \"fTime\": {\n            if (booking1.start_time < booking2.start_time) return 1;\n            if (booking1.start_time > booking2.start_time) return -1;\n            return 0;\n          }\n          default: {\n            return booking1.booked_desk.localeCompare(booking2.booked_desk);\n          }\n        }\n      });\n      setBookingList(bookings);\n    };\n    getBookingList();\n  }, [sortVariant]);\n\n  return (\n    <List style={{ height: \"calc(100vh - 280px)\", overflow: \"auto\" }}>\n      {bookingList.map((desk) => (\n        <ListItemButton key={desk.booking_id}>\n          <Stack>\n            <Typography variant=\"subtitle2\">\n              Desk: {desk.booked_desk}\n            </Typography>\n            <Typography variant=\"body2\">User: {desk.user_name}</Typography>\n            <Typography variant=\"body2\">\n              From:{getDateFromNumber(desk.start_time)} - to:\n              {getDateFromNumber(desk.end_time)}\n            </Typography>\n          </Stack>\n        </ListItemButton>\n      ))}\n    </List>\n  );\n};\n","import { List, ListItem, Stack, Typography } from \"@mui/material\";\nimport { useState, FC, useEffect } from \"react\";\nimport { DeskType } from \"../types\";\n\nexport const DeskList: FC = () => {\n  const [deskList, setDeskList] = useState<DeskType[]>([]);\n\n  useEffect(() => {\n    const getDeskList = async () => {\n      const deskList = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/desk/list`\n      );\n      const jsonDeskList = await deskList.json();\n      const desks: DeskType[] = jsonDeskList.deskList;\n      setDeskList(desks);\n    };\n    getDeskList();\n  }, []);\n\n  return (\n    <List style={{ height: \"calc(100vh - 260px)\", overflow: \"auto\" }}>\n      {deskList.map((desk) => (\n        <ListItem key={desk.desk_id}>\n          <Stack>\n            <Typography\n              color={desk.desk_state === \"free\" ? \"inherit\" : \"red\"}\n              variant=\"subtitle2\"\n            >\n              Desk: {desk.desk_id}\n            </Typography>\n            <Typography\n              color={desk.desk_state === \"free\" ? \"inherit\" : \"red\"}\n              variant=\"body2\"\n            >\n              State: {desk.desk_state}\n            </Typography>\n          </Stack>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import {\n  CardContent,\n  CardHeader,\n  CardActions,\n  Card,\n  Grid,\n  Button,\n} from \"@mui/material\";\nimport { FC, useState } from \"react\";\nimport { BookingList } from \"../components/BookingList\";\nimport { DeskList } from \"../components/DeskList\";\nimport { FormContext } from \"../FormContext\";\n\nconst AdminPage: FC = () => {\n  const [sortVariant, setSortVariant] = useState(\"\");\n  const store = {\n    sortVariant: [sortVariant, setSortVariant],\n  };\n  return (\n    <FormContext.Provider value={store}>\n      <Grid container spacing={5} padding={5}>\n        <Grid item xs={12} md={6}>\n          <Card\n            elevation={6}\n            sx={{\n              width: { xs: \"100%\", md: \"900px\" },\n              minHeight: \"calc(100vh - 170px)\",\n            }}\n          >\n            <CardHeader title=\"All bookings\" />\n            <CardContent>\n              <BookingList />\n            </CardContent>\n            <CardActions sx={{ justifyContent: \"space-between\" }}>\n              <Button variant=\"outlined\" onClick={() => setSortVariant(\"name\")}>\n                Sort by name\n              </Button>\n              <Button variant=\"outlined\" onClick={() => setSortVariant(\"desk\")}>\n                Sort by desk\n              </Button>\n              <Button\n                variant=\"outlined\"\n                onClick={() => setSortVariant(\"nTime\")}\n              >\n                Sort by nearest time\n              </Button>\n              <Button\n                variant=\"outlined\"\n                onClick={() => setSortVariant(\"fTime\")}\n              >\n                Sort by furthest time\n              </Button>\n            </CardActions>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Card\n            elevation={6}\n            sx={{\n              width: { xs: \"100%\", md: \"900px\" },\n              minHeight: \"calc(100vh - 130px)\",\n            }}\n          >\n            <CardHeader title=\"All desks\" />\n            <CardContent>\n              <DeskList />\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </FormContext.Provider>\n  );\n};\nexport default AdminPage;\n","export default __webpack_public_path__ + \"static/media/ordina_logo.7a9a0777.png\";","import {\n  Toolbar,\n  IconButton,\n  AppBar,\n  Typography,\n  Menu,\n  MenuItem,\n  Link,\n} from \"@mui/material\";\nimport AccountBoxIcon from \"@mui/icons-material/AccountBox\";\nimport { FC, useState } from \"react\";\nimport img from \"../images/ordina_logo.png\";\nimport { LOGIN_ROUTE_URL, USER_ROUTE_URL } from \"../routeUrls\";\n\nexport const TopBar: FC = () => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const user = sessionStorage.getItem(\"activeUser\");\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    if (user) {\n      setAnchorEl(event.currentTarget);\n    }\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleLogOut = () => {\n    setAnchorEl(null);\n    sessionStorage.clear();\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar variant=\"dense\" sx={{ gap: \"10px\" }}>\n        <img src={img} alt=\"logo\" style={{ height: \"2.5rem\" }} />\n        <Typography\n          variant=\"h5\"\n          color=\"inherit\"\n          component=\"div\"\n          sx={{ flexGrow: 1, fontSize: { xs: \"10px\", md: \"inherit\" } }}\n        >\n          Smart office management\n        </Typography>\n        {user ? (\n          <Typography variant=\"body1\">{JSON.parse(user).name}</Typography>\n        ) : (\n          \"\"\n        )}\n        <IconButton size=\"large\" color=\"inherit\" onClick={handleClick}>\n          <AccountBoxIcon />\n        </IconButton>\n      </Toolbar>\n      <Menu\n        id=\"user-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          \"aria-labelledby\": \"basic-button\",\n        }}\n      >\n        <MenuItem>\n          <Link href={USER_ROUTE_URL}>To account</Link>\n        </MenuItem>\n        <MenuItem>\n          <Link href={LOGIN_ROUTE_URL} onClick={handleLogOut}>\n            Log out\n          </Link>\n        </MenuItem>\n      </Menu>\n    </AppBar>\n  );\n};\n","import {createTheme } from '@mui/material/styles';\n\nexport const theme = createTheme({\n    palette: {\n      primary: {\n        main: \"#f58220\",\n        light: \"#e1e1e1\",\n        dark: \"#c46819\"\n      },\n      secondary: {\n        main: \"#007f92\",\n        light: \"#3da4bf\",\n        dark: \"#58595b\"\n      },\n    },\n  });","import { ThemeProvider } from \"@mui/material/styles\";\nimport BookingPage from \"./pages/BookingPage\";\nimport CheckinPage from \"./pages/CheckinPage\";\nimport LoginPage from \"./pages/LoginPage\";\nimport UserPage from \"./pages/UserPage\";\nimport RegisterPage from \"./pages/RegisterPage\";\nimport AdminPage from \"./pages/AdminPage\";\nimport { TopBar } from \"./components/TopBar\";\nimport { Route, BrowserRouter, Switch, Redirect } from \"react-router-dom\";\nimport { CssBaseline } from \"@mui/material\";\nimport { theme } from \"./theme\";\nimport \"./App.css\";\nimport {\n  BOOKING_ROUTE_URL,\n  CHECKIN_ROUTE_URL,\n  USER_ROUTE_URL,\n  REGISTER_ROUTE_URL,\n  ADMIN_ROUTE_URL,\n} from \"./routeUrls\";\nimport { useEffect } from \"react\";\n\nfunction App() {\n  const user = sessionStorage.getItem(\"activeUser\");\n  const jsonUser = user ? JSON.parse(user) : null;\n  const isUser = jsonUser && jsonUser.role === \"user\";\n  const isAdmin = jsonUser && jsonUser.role === \"admin\";\n  Notification.requestPermission();\n  useEffect(() => {\n    const checkNotifications = async () => {\n      if (isUser) {\n        const desks = await fetch(\n          `${process.env.REACT_APP_ROOT_URL}api/user/notification/${jsonUser.name}`\n        );\n        const notificationJson = await desks.json();\n        if (notificationJson.notifications.length > 0) {\n          if (window.Notification.permission === \"granted\") {\n            new window.Notification(\n              notificationJson.notifications\n                .map((notification: any) => {\n                  return notification.message;\n                })\n                .join(\" \")\n            );\n          }\n        }\n      }\n    };\n    const timer = setInterval(() => {\n      checkNotifications();\n    }, 10000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [isUser, jsonUser]);\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <BrowserRouter>\n          <CssBaseline />\n          <TopBar />\n          {isAdmin && (\n            <Switch>\n              <Route path={ADMIN_ROUTE_URL} component={AdminPage}></Route>\n\n              <Route>\n                <Redirect to={ADMIN_ROUTE_URL} />\n              </Route>\n            </Switch>\n          )}\n          {isUser && (\n            <Switch>\n              <Route path={BOOKING_ROUTE_URL} component={BookingPage}></Route>\n              <Route path={CHECKIN_ROUTE_URL} component={CheckinPage}></Route>\n              <Route path={USER_ROUTE_URL} component={UserPage}></Route>\n\n              <Route>\n                <Redirect to={USER_ROUTE_URL} />\n              </Route>\n            </Switch>\n          )}\n          {!isUser && !isAdmin && (\n            <Switch>\n              <Route path={REGISTER_ROUTE_URL} component={RegisterPage} />\n              <Route component={LoginPage} />\n            </Switch>\n          )}\n        </BrowserRouter>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}