{"version":3,"sources":["FormContext.ts","components/TimeSetter.tsx","utils.ts","components/steps/TimeStep.tsx","components/DateSetter.tsx","components/steps/DateStep.tsx","components/AvailableDeskList.tsx","images/floor_plan_Ordina_B2.jpg","components/steps/DeskStep.tsx","routeUrls.ts","components/BookingStepper.tsx","pages/BookingPage.tsx","components/DeskItem.tsx","components/CheckinDeskList.tsx","pages/CheckinPage.tsx","pages/LoginPage.tsx","pages/UserPage.tsx","pages/RegisterPage.tsx","images/ordina_logo.png","components/TopBar.tsx","theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FormContext","React","createContext","TimeSetter","title","type","useContext","startTime","startTimeValue","setStartTimeValue","endTime","endTimeValue","setEndTimeValue","Box","Typography","variant","gutterBottom","LocalizationProvider","dateAdapter","AdapterDateFns","TimePicker","value","onChange","newValue","renderInput","params","TextField","isBetween","min","max","getUnixTime","date","time","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getTime","isFutureTime","dateValue","now","isDeskSelected","selectedDesk","isEndTimeAfterStart","endtimeValue","unixStartTime","TimeStep","Stack","spacing","Alert","severity","Divider","isPastDate","DateSetter","setDateValue","StaticDatePicker","orientation","displayStaticWrapperAs","openTo","shouldDisableDate","DateStep","AvailableDeskList","useState","currentDeskList","setCurrentDeskList","desk","setSelectedDesk","bookingSucces","useEffect","setDeskList","a","fetch","process","bookingList","json","jsonBookingList","bookings","bookingsAtTime","filter","booking","unixEndTime","isBetweenStart","start_time","isBetweenEnd","end_time","data","availableDesks","deskList","find","booked_desk","desk_id","FormControl","sx","m","minWidth","InputLabel","Select","label","event","target","map","MenuItem","DeskStep","imgOpen","setImgOpen","Grid","container","item","xs","md","className","onClick","src","img","alt","Modal","open","onClose","BOOKING_ROUTE_URL","CHECKIN_ROUTE_URL","USER_ROUTE_URL","LOGIN_ROUTE_URL","REGISTER_ROUTE_URL","BookingStepper","history","useHistory","stepComponents","steps","activeStep","setActiveStep","setBookingSucces","setPrevSelectedDesk","prevSelectedDesk","handleBooking","user","sessionStorage","getItem","jsonUser","JSON","parse","method","headers","body","stringify","booking_id","user_name","name","push","isBookingPossible","isLastStep","length","hasStepError","index","Card","elevation","width","CardContent","minHeight","Stepper","nonLinear","Step","StepButton","color","CardActions","justifyContent","Button","disabled","BookingPage","initialStartTime","setHours","initialEndTime","store","Provider","p","pt","Snackbar","anchorOrigin","vertical","horizontal","action","IconButton","autoHideDuration","message","DeskItemCheckIn","ListItem","UNIX_HALF_HOUR","isBookedNow","CheckinDeskList","deskId","isBookedByUser","isDeskUser","setDeskUser","checkBookedByUser","userBookings","userDeskList","userDeskBooking","desks","desksJson","allDesks","deskIndex","findIndex","getDeskForBooking","currentBookedDesks","bookedDesk","nearbyDesks","otherDesk","otherdDeskIndex","isCurrentlyBooked","distance","List","style","maxHeight","overflow","CheckinPage","document","location","search","substr","currentDeskState","setCurrentDeskState","setOpen","setInitialDeskState","deskState","handleToggleChecked","CardHeader","LoginPage","logInFail","setLogInFail","userName","setUserName","password","setPassword","getUser","userCheck","userCheckJson","isValid","setItem","reload","textAlign","alignItems","href","UserPage","setUserDeskList","recentBooking","setRecentBooking","allUserDesks","sort","desk1","desk2","getDateFromNumber","toLocaleString","userDesk","ListItemText","primary","secondary","RegisterPage","confirmPassword","setConfirmPassword","createUser","role","isUserCreated","TopBar","anchorEl","setAnchorEl","Boolean","AppBar","position","Toolbar","gap","height","component","flexGrow","fontSize","size","currentTarget","Menu","id","MenuListProps","Link","clear","theme","createTheme","palette","main","light","dark","App","ThemeProvider","CssBaseline","path","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8c20a971.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const FormContext = React.createContext<any>(null);","import { FC, useContext } from \"react\";\nimport { Typography, Box, TextField } from \"@mui/material\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport { LocalizationProvider, TimePicker } from \"@mui/lab\";\nimport { FormContext } from \"../FormContext\";\n\ntype Props = {\n  title: string;\n  type: \"Start\" | \"End\";\n};\n\nexport const TimeSetter: FC<Props> = ({ title, type }) => {\n  const {\n    startTime: [startTimeValue, setStartTimeValue],\n  } = useContext(FormContext);\n  const {\n    endTime: [endTimeValue, setEndTimeValue],\n  } = useContext(FormContext);\n  return (\n    <Box>\n      <Typography variant=\"body1\" gutterBottom>\n        {title}\n      </Typography>\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <TimePicker\n          value={type === \"Start\" ? startTimeValue : endTimeValue}\n          onChange={(newValue) => {\n            if (!newValue) {\n              return;\n            }\n            if (type === \"Start\") {\n              setStartTimeValue(newValue);\n            }\n            if (type === \"End\") {\n              setEndTimeValue(newValue);\n            }\n          }}\n          renderInput={(params) => <TextField {...params} />}\n        />\n      </LocalizationProvider>\n    </Box>\n  );\n};\n","export function isBetween(value: number, min: number, max: number) {\n  return value >= min && value <= max;\n}\n\nexport function getUnixTime(date: Date, time: Date) {\n  return (\n    new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n      time.getHours(),\n      time.getMinutes()\n    ).getTime() / 1000\n  );\n}\n\nexport const isFutureTime = (dateValue:Date, startTimeValue:Date) =>{\n  const unixStartTime = getUnixTime(dateValue, startTimeValue);\n  return unixStartTime - (Date.now() / 1000) <= 0;\n}\nexport const isDeskSelected =(selectedDesk:string) =>{\n  return selectedDesk === \"\"\n}\nexport const isEndTimeAfterStart = (dateValue:Date, startTimeValue:Date, endtimeValue:Date) =>{\n  const unixStartTime = getUnixTime(dateValue, startTimeValue);\n  const unixEndTime = getUnixTime(dateValue, endtimeValue);\n  return unixEndTime - unixStartTime <= 0;\n}\n\n","import { FC, useContext } from \"react\";\nimport { Stack, Alert, Divider } from \"@mui/material\";\nimport { TimeSetter } from \"../TimeSetter\";\nimport { isFutureTime, isEndTimeAfterStart } from \"../../utils\";\nimport { FormContext } from \"../../FormContext\";\n\nexport const TimeStep: FC = () => {\n  const {\n    date: [dateValue],\n    startTime: [startTimeValue],\n    endTime: [endTimeValue],\n  } = useContext(FormContext);\n\n  return (\n    <Stack spacing={2}>\n      <TimeSetter\n        title={\"Please select the start time for the booking\"}\n        type={\"Start\"}\n      />\n      {isFutureTime(dateValue, startTimeValue) ? (\n        <Alert severity=\"warning\">Check if the time has passed</Alert>\n      ) : null}\n      <Divider />\n      <TimeSetter\n        title={\"Please select the end time for the booking\"}\n        type={\"End\"}\n      />\n      {isEndTimeAfterStart(dateValue, startTimeValue, endTimeValue) ? (\n        <Alert severity=\"warning\">\n          The end time is earlier than the start time\n        </Alert>\n      ) : null}\n    </Stack>\n  );\n};\n","import { useContext, FC } from \"react\";\nimport { TextField } from \"@mui/material\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport { LocalizationProvider, StaticDatePicker } from \"@mui/lab\";\nimport { FormContext } from \"../FormContext\";\nimport { getUnixTime } from \"../utils\";\n\nconst UNIX_DAY = 86400;\n\nconst isPastDate = (date: Date) => {\n  return getUnixTime(date, date) < Date.now() / 1000 - UNIX_DAY;\n};\n\nexport const DateSetter: FC = () => {\n  const {\n    date: [dateValue, setDateValue],\n  } = useContext(FormContext);\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <StaticDatePicker<Date>\n        orientation=\"portrait\"\n        displayStaticWrapperAs=\"desktop\"\n        openTo=\"day\"\n        value={dateValue}\n        shouldDisableDate={isPastDate}\n        onChange={(newValue) => {\n          if (newValue) {\n            setDateValue(newValue);\n          }\n        }}\n        renderInput={(params) => <TextField {...params} />}\n      />\n    </LocalizationProvider>\n  );\n};\n","import { FC } from \"react\";\nimport { Box, Typography } from \"@mui/material\";\nimport { DateSetter } from \"../DateSetter\";\n\nexport const DateStep: FC = () => {\n  return (\n    <Box>\n      <Typography variant=\"body1\" gutterBottom>\n        Please select the date for the booking\n      </Typography>\n      <DateSetter />\n    </Box>\n  );\n};\n","import {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n} from \"@mui/material\";\nimport { useState, FC, useEffect, useContext } from \"react\";\nimport { DeskType, Booking } from \"../types\";\nimport { isBetween, getUnixTime } from \"../utils\";\nimport { FormContext } from \"../FormContext\";\n\nexport const AvailableDeskList: FC = () => {\n  const [currentDeskList, setCurrentDeskList] = useState<DeskType[]>([]);\n  const {\n    desk: [selectedDesk, setSelectedDesk],\n  } = useContext(FormContext);\n  const {\n    startTime: [startTimeValue],\n  } = useContext(FormContext);\n  const {\n    endTime: [endTimeValue],\n  } = useContext(FormContext);\n  const {\n    date: [dateValue],\n  } = useContext(FormContext);\n  const {\n    bookingSucces: [bookingSucces],\n  } = useContext(FormContext);\n\n  const handleChange = (event: SelectChangeEvent) => {\n    setSelectedDesk(event.target.value);\n  };\n\n  useEffect(() => {\n    const setDeskList = async () => {\n      const bookingList = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/bookinglist`\n      );\n      const jsonBookingList = await bookingList.json();\n      const bookings: Booking[] = jsonBookingList.bookingList;\n\n      const bookingsAtTime = bookings.filter((booking: Booking) => {\n        const unixStartTime = getUnixTime(dateValue, startTimeValue);\n        const unixEndTime = getUnixTime(dateValue, endTimeValue);\n        const isBetweenStart = isBetween(\n          booking.start_time,\n          unixStartTime,\n          unixEndTime\n        );\n        const isBetweenEnd = isBetween(\n          booking.end_time,\n          unixStartTime,\n          unixEndTime\n        );\n        return isBetweenStart || isBetweenEnd;\n      });\n\n      const data = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/desk/list`\n      );\n      const json = await data.json();\n\n      const availableDesks = json.deskList.filter((desk: DeskType) => {\n        const isBooked = bookingsAtTime.find(\n          (booking: Booking) => booking.booked_desk === desk.desk_id\n        );\n        return !isBooked;\n      });\n      setCurrentDeskList(availableDesks);\n    };\n    setDeskList();\n  }, [bookingSucces, endTimeValue, startTimeValue, dateValue]);\n\n  return (\n    <FormControl sx={{ m: 1, minWidth: 120 }}>\n      <InputLabel>Desk</InputLabel>\n      <Select value={selectedDesk} label=\"Desk\" onChange={handleChange}>\n        {currentDeskList.map((desk) => (\n          <MenuItem value={desk.desk_id}>{desk.desk_id}</MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/floor_plan_Ordina_B2.c52b3cd2.jpg\";","import { FC, useContext, useState } from \"react\";\nimport { Typography, Alert, Grid, Modal } from \"@mui/material\";\nimport { AvailableDeskList } from \"../AvailableDeskList\";\nimport { isDeskSelected } from \"../../utils\";\nimport { FormContext } from \"../../FormContext\";\nimport img from \"../../images/floor_plan_Ordina_B2.jpg\";\nimport \"./DeskStep.css\";\n\nexport const DeskStep: FC = () => {\n  const [imgOpen, setImgOpen] = useState(false);\n  const {\n    desk: [selectedDesk],\n  } = useContext(FormContext);\n\n  return (\n    <div>\n      <Grid container spacing={1}>\n        <Grid item xs={12} md={4}>\n          <Typography variant=\"body1\" gutterBottom>\n            Please select one of the available desks:\n          </Typography>\n          <AvailableDeskList />\n          {isDeskSelected(selectedDesk) ? (\n            <Alert severity=\"warning\">There is no desk selected</Alert>\n          ) : (\n            \"\"\n          )}\n        </Grid>\n        <Grid item xs={12} md={8}>\n          <img\n            className=\"deskstep-image\"\n            onClick={() => setImgOpen(true)}\n            src={img}\n            alt=\"Layout\"\n          />\n          <Typography variant=\"caption\">Click image to enlarge</Typography>\n        </Grid>\n      </Grid>\n      <Modal open={imgOpen} onClose={() => setImgOpen(false)}>\n        <img className=\"deskstep-modal-content\" alt=\"zoomedLayout\" src={img} />\n      </Modal>\n    </div>\n  );\n};\n","export const BOOKING_ROUTE_URL = \"/desks/booking\"\nexport const CHECKIN_DESKPREFIX_ROUTE_URL = \"/desks/checkin/?b2.\"\nexport const CHECKIN_ROUTE_URL = \"/desks/checkin/\"\nexport const USER_ROUTE_URL = \"/desks/user\"\nexport const LOGIN_ROUTE_URL = \"/desks/login\"\nexport const REGISTER_ROUTE_URL = \"/desks/register\"\n","import {\n  Stepper,\n  Step,\n  StepButton,\n  Typography,\n  Button,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n} from \"@mui/material\";\nimport { FC, useContext } from \"react\";\nimport { TimeStep } from \"../components/steps/TimeStep\";\nimport { DateStep } from \"../components/steps/DateStep\";\nimport { DeskStep } from \"../components/steps/DeskStep\";\nimport { FormContext } from \"../FormContext\";\nimport {\n  isDeskSelected,\n  isEndTimeAfterStart,\n  isFutureTime,\n  getUnixTime,\n} from \"../utils\";\nimport { activeUser } from \"../types\";\nimport { useHistory } from \"react-router-dom\";\nimport { USER_ROUTE_URL } from \"../routeUrls\";\n\nexport const BookingStepper: FC = () => {\n  const history = useHistory();\n  const stepComponents = [<DateStep />, <TimeStep />, <DeskStep />];\n  const steps: string[] = [\n    \"Select booking date\",\n    \"Select booking time\",\n    \"Select desk\",\n  ];\n  const {\n    activeStep: [activeStep, setActiveStep],\n    date: [dateValue],\n    startTime: [startTimeValue],\n    endTime: [endTimeValue],\n    desk: [selectedDesk, setSelectedDesk],\n    bookingSucces: [, setBookingSucces],\n    prevSelectedDesk: [, setPrevSelectedDesk],\n  } = useContext(FormContext);\n\n  const handleBooking = async () => {\n    const user = sessionStorage.getItem(\"activeUser\");\n    if (user) {\n      const jsonUser: activeUser = JSON.parse(user);\n      const data = await fetch(`${process.env.REACT_APP_ROOT_URL}api/book`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\",\n        },\n        body: JSON.stringify({\n          booking_id: `booking ${selectedDesk}.${Date.now()}`,\n          start_time: getUnixTime(dateValue, startTimeValue),\n          end_time: getUnixTime(dateValue, endTimeValue),\n          booked_desk: selectedDesk,\n          user_name: jsonUser.name,\n        }),\n      });\n      const json = await data.json();\n      if (json.booking) {\n        setBookingSucces(true);\n        setPrevSelectedDesk(selectedDesk);\n        setSelectedDesk(\"\");\n      }\n      history.push(USER_ROUTE_URL);\n    }\n  };\n\n  const isBookingPossible = () => {\n    return (\n      isLastStep &&\n      (isDeskSelected(selectedDesk) ||\n        isEndTimeAfterStart(dateValue, startTimeValue, endTimeValue) ||\n        isFutureTime(dateValue, startTimeValue))\n    );\n  };\n\n  const isLastStep = activeStep === steps.length - 1;\n  const handleStep = (step: number) => {\n    setActiveStep(step);\n  };\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n  };\n\n  const hasStepError = (index: number) => {\n    return (\n      (index === 1 && isFutureTime(dateValue, startTimeValue)) ||\n      (index === 1 &&\n        isEndTimeAfterStart(dateValue, startTimeValue, endTimeValue)) ||\n      (index === 2 && isDeskSelected(selectedDesk))\n    );\n  };\n\n  return (\n    <Card\n      elevation={6}\n      className=\"basecard\"\n      sx={{ width: { xs: \"100%\", md: \"900px\" } }}\n    >\n      <CardContent\n        sx={{ minHeight: { xs: \"calc(100vh - 120px)\", md: \"580px\" } }}\n      >\n        <Grid container spacing={5}>\n          <Grid item xs={6} md={12}>\n            <Stepper nonLinear activeStep={activeStep}>\n              {steps.map((label, index) => (\n                <Step key={label}>\n                  <StepButton onClick={() => handleStep(index)}>\n                    <Typography variant=\"body1\">{label}</Typography>\n                    {hasStepError(index) ? (\n                      <Typography variant=\"caption\" color=\"error\">\n                        Missing/ wrong information\n                      </Typography>\n                    ) : null}\n                  </StepButton>\n                </Step>\n              ))}\n            </Stepper>\n          </Grid>\n          <Grid item xs={12}>\n            {stepComponents[activeStep]}\n          </Grid>\n          <Grid item xs={12}></Grid>\n        </Grid>\n      </CardContent>\n      <CardActions sx={{ justifyContent: \"flex-end\" }}>\n        <Button disabled={activeStep === 0} onClick={handleBack}>\n          Back\n        </Button>\n        {isLastStep ? (\n          <Button\n            variant=\"contained\"\n            onClick={handleBooking}\n            disabled={isBookingPossible()}\n            color=\"secondary\"\n          >\n            Book\n          </Button>\n        ) : (\n          <Button\n            variant=\"contained\"\n            onClick={handleNext}\n            disabled={isBookingPossible()}\n          >\n            Next\n          </Button>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n","import { FC, useState } from \"react\";\nimport { Snackbar, IconButton, Box } from \"@mui/material\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { BookingStepper } from \"../components/BookingStepper\";\nimport { FormContext } from \"../FormContext\";\n\nconst UNIX_DAY = 86400 * 1000;\n\nconst BookingPage: FC = () => {\n  const initialStartTime = new Date();\n  initialStartTime.setHours(9, 0, 0, 0);\n  const initialEndTime = new Date();\n  initialEndTime.setHours(17, 0, 0, 0);\n  const [prevSelectedDesk, setPrevSelectedDesk] = useState(\"\");\n  const [activeStep, setActiveStep] = useState(0);\n  const [bookingSucces, setBookingSucces] = useState(false);\n  const [startTimeValue, setStartTimeValue] = useState<Date>(initialStartTime);\n  const [endTimeValue, setEndTimeValue] = useState<Date>(initialEndTime);\n  const [dateValue, setDateValue] = useState<Date>(\n    new Date(Date.now() + UNIX_DAY)\n  );\n  const [selectedDesk, setSelectedDesk] = useState(\"\");\n  const store = {\n    startTime: [startTimeValue, setStartTimeValue],\n    endTime: [endTimeValue, setEndTimeValue],\n    date: [dateValue, setDateValue],\n    desk: [selectedDesk, setSelectedDesk],\n    activeStep: [activeStep, setActiveStep],\n    bookingSucces: [bookingSucces, setBookingSucces],\n    prevSelectedDesk: [prevSelectedDesk, setPrevSelectedDesk],\n  };\n\n  return (\n    <FormContext.Provider value={store}>\n      <Box sx={{ p: { xs: 1, md: 3 }, pt: { xs: 3, md: 3 } }}>\n        <BookingStepper />\n        <Snackbar\n          anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n          open={bookingSucces}\n          action={\n            <IconButton\n              onClick={() => {\n                setBookingSucces(false);\n              }}\n            >\n              <CloseIcon color={\"primary\"} />\n            </IconButton>\n          }\n          autoHideDuration={6000}\n          onClose={() => {\n            setBookingSucces(false);\n          }}\n          message={`Your booking for desk ${prevSelectedDesk} was successful`}\n        />\n      </Box>\n    </FormContext.Provider>\n  );\n};\nexport default BookingPage;\n","import { ListItem } from \"@mui/material\";\nimport { FC } from \"react\";\nimport { DeskType } from \"../types\";\n\ntype Props = {\n  desk: DeskType;\n};\nexport const DeskItemCheckIn: FC<Props> = ({ desk }) => {\n  return <ListItem>{desk.desk_id}</ListItem>;\n};\n","import { List, Stack, Typography } from \"@mui/material\";\nimport { useState, FC, useEffect, useContext } from \"react\";\nimport { DeskType, Booking } from \"../types\";\nimport { DeskItemCheckIn } from \"./DeskItem\";\nimport { isBetween } from \"../utils\";\nimport { FormContext } from \"../FormContext\";\n\ntype Props = {\n  deskId: string;\n};\nconst OFFSET_AVAILABLE_DESKS = 2;\nconst UNIX_HALF_HOUR = 1800000;\n\nconst isBookedNow = (booking: Booking) => {\n  return isBetween(\n    Date.now() / 1000,\n    booking.start_time - UNIX_HALF_HOUR,\n    booking.end_time\n  );\n};\n\nexport const CheckinDeskList: FC<Props> = ({ deskId }) => {\n  const [currentDeskList, setCurrentDeskList] = useState<DeskType[]>([]);\n  const {\n    isBookedByUser: [isDeskUser, setDeskUser],\n  } = useContext(FormContext);\n\n  useEffect(() => {\n    const checkBookedByUser = async () => {\n      const user = sessionStorage.getItem(\"activeUser\");\n      if (user) {\n        const jsonUser = JSON.parse(user);\n        const data = await fetch(\n          `${process.env.REACT_APP_ROOT_URL}api/user/list/${jsonUser.name}`\n        );\n        const json = await data.json();\n        const userBookings: Booking[] = json.userDeskList;\n        const userDeskBooking = userBookings.find((booking: Booking) => {\n          return booking.booked_desk === deskId;\n        });\n        if (userDeskBooking) {\n          setDeskUser(\n            isBetween(\n              userDeskBooking.start_time,\n              Date.now() / 1000 - UNIX_HALF_HOUR,\n              Date.now() / 1000 + UNIX_HALF_HOUR\n            )\n          );\n          return;\n        }\n        setDeskUser(false);\n      }\n    };\n    checkBookedByUser();\n\n    const setDeskList = async () => {\n      const desks = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/desk/list`\n      );\n      const desksJson = await desks.json();\n      const allDesks: DeskType[] = desksJson.deskList;\n\n      const bookingList = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/bookinglist`\n      );\n      const jsonBookingList = await bookingList.json();\n      const bookings: Booking[] = jsonBookingList.bookingList;\n\n      const deskIndex = allDesks.findIndex((desk) => desk.desk_id === deskId);\n      const getDeskForBooking = (booking: Booking) =>\n        allDesks.find((desk) => desk.desk_id === booking.booked_desk);\n      const currentBookedDesks = bookings\n        .filter(isBookedNow)\n        .map(getDeskForBooking);\n\n      if (\n        currentBookedDesks.find((bookedDesk) => bookedDesk?.desk_id === deskId)\n      ) {\n        const nearbyDesks = allDesks.filter((otherDesk, otherdDeskIndex) => {\n          const isCurrentlyBooked = currentBookedDesks.find(\n            (bookedDesk) => bookedDesk?.desk_id === otherDesk.desk_id\n          );\n          const isSameDesk = deskIndex === otherdDeskIndex;\n          const distance = deskIndex - otherdDeskIndex;\n          const isInRange =\n            distance >= -OFFSET_AVAILABLE_DESKS &&\n            distance <= OFFSET_AVAILABLE_DESKS;\n          return !isSameDesk && isInRange && !isCurrentlyBooked;\n        });\n        setCurrentDeskList(nearbyDesks);\n      }\n    };\n    setDeskList();\n  }, [deskId, setDeskUser]);\n\n  return (\n    <>\n      {currentDeskList.length <= 0 || isDeskUser ? (\n        \"\"\n      ) : (\n        <Stack>\n          <Typography>This desk is not available, but these are:</Typography>\n          <List style={{ maxHeight: 200, overflow: \"auto\" }}>\n            {currentDeskList.map((desk) => (\n              <DeskItemCheckIn key={desk.desk_id} desk={desk}></DeskItemCheckIn>\n            ))}\n          </List>\n        </Stack>\n      )}\n    </>\n  );\n};\n","import {\n  Button,\n  Snackbar,\n  Box,\n  IconButton,\n  Card,\n  CardHeader,\n  CardContent,\n  Divider,\n  Stack,\n} from \"@mui/material\";\nimport { useState, FC, useEffect } from \"react\";\nimport { CheckinDeskList } from \"../components/CheckinDeskList\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { FormContext } from \"../FormContext\";\n\nconst CheckinPage: FC = () => {\n  const deskId = document.location.search.substr(1);\n  const [currentDeskState, setCurrentDeskState] = useState(\"free\");\n  const [open, setOpen] = useState(false);\n  const [isDeskUser, setDeskUser] = useState(false);\n\n  useEffect(() => {\n    const setInitialDeskState = async () => {\n      const data = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/desk/${deskId}`\n      );\n      const json = await data.json();\n      setCurrentDeskState(json.deskState);\n    };\n    setInitialDeskState();\n  }, [deskId]);\n\n  const handleToggleChecked = async () => {\n    const data = await fetch(\n      `${process.env.REACT_APP_ROOT_URL}api/desk/${deskId}`,\n      {\n        method: \"PATCH\",\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\",\n        },\n        body: JSON.stringify({\n          deskState: currentDeskState,\n          deskId: deskId,\n        }),\n      }\n    );\n    const json = await data.json();\n    setCurrentDeskState(json.deskState);\n    setOpen(true);\n  };\n\n  const store = {\n    isBookedByUser: [isDeskUser, setDeskUser],\n  };\n\n  return (\n    <FormContext.Provider value={store}>\n      <Box sx={{ p: { xs: 1, md: 3 }, pt: { xs: 3, md: 3 } }}>\n        <Card\n          elevation={6}\n          className=\"basecard\"\n          sx={{ width: { xs: \"100%\", md: \"900px\" } }}\n        >\n          <CardHeader title={`Desk ${deskId}`} />\n          <CardContent>\n            <Stack spacing={2}>\n              <Button\n                variant=\"contained\"\n                sx={{ width: \"200px\" }}\n                color=\"secondary\"\n                disabled={currentDeskState === \"unavailable\" || !isDeskUser}\n                onClick={handleToggleChecked}\n              >\n                {currentDeskState === \"free\" ? \"Check in\" : \"Check out\"}\n              </Button>\n              <Divider />\n              <CheckinDeskList deskId={deskId} />\n            </Stack>\n          </CardContent>\n        </Card>\n        <Snackbar\n          anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n          open={open}\n          autoHideDuration={6000}\n          onClose={() => {\n            setOpen(false);\n          }}\n          action={\n            <IconButton onClick={() => setOpen(false)}>\n              <CloseIcon color={\"primary\"} />\n            </IconButton>\n          }\n          message={currentDeskState === \"free\" ? \"checked out\" : \"checked in\"}\n        />\n      </Box>\n    </FormContext.Provider>\n  );\n};\n\nexport default CheckinPage;\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardActions,\n  Typography,\n  TextField,\n  Stack,\n  Button,\n  Snackbar,\n  IconButton,\n  Box,\n} from \"@mui/material\";\nimport { FC, useState } from \"react\";\nimport { REGISTER_ROUTE_URL } from \"../routeUrls\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n\nconst LoginPage: FC = () => {\n  const [logInFail, setLogInFail] = useState(false);\n  const [userName, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const getUser = async () => {\n    const userCheck = await fetch(\n      `${process.env.REACT_APP_ROOT_URL}api/user/${userName}/${password}`\n    );\n    const userCheckJson = await userCheck.json();\n    const isValidUser: boolean = userCheckJson.isValid;\n    if (isValidUser) {\n      const json = `{\"name\": \"${userName}\", \"role\": \"user\"}`;\n      sessionStorage.setItem(\"activeUser\", json);\n      // eslint-disable-next-line no-restricted-globals\n      location.reload();\n      return;\n    }\n    setLogInFail(true);\n    //TODO warning fields incorrect\n  };\n  const areFieldsEmpty = () => {\n    return userName.length === 0 || password.length === 0;\n  };\n  return (\n    <Box sx={{ p: { xs: 1, md: 3 }, pt: { xs: 3, md: 3 } }}>\n      <Card\n        elevation={6}\n        className=\"basecard\"\n        sx={{ width: { xs: \"100%\", md: \"900px\" } }}\n      >\n        <CardHeader title=\"Sign in\" sx={{ textAlign: \"center\" }} />\n        <CardContent>\n          <Stack alignItems=\"center\" spacing={4}>\n            <TextField\n              label=\"Email address\"\n              onChange={(event) => setUserName(event.target.value)}\n              sx={{ width: \"25rem\" }}\n            />\n            <TextField\n              label=\"Password\"\n              onChange={(event) => setPassword(event.target.value)}\n              sx={{ width: \"25rem\" }}\n              type=\"password\"\n            />\n            <Button\n              disabled={areFieldsEmpty()}\n              onClick={getUser}\n              variant=\"contained\"\n            >\n              Sign in\n            </Button>\n          </Stack>\n        </CardContent>\n        <CardActions sx={{ justifyContent: \"flex-end\" }}>\n          <Typography> dont have an account? </Typography>\n          <Button color=\"primary\" href={REGISTER_ROUTE_URL}>\n            {\" \"}\n            Register\n          </Button>\n        </CardActions>\n      </Card>\n      <Snackbar\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n        open={logInFail}\n        action={\n          <IconButton\n            onClick={() => {\n              setLogInFail(false);\n            }}\n          >\n            <CloseIcon color={\"primary\"} />\n          </IconButton>\n        }\n        autoHideDuration={6000}\n        onClose={() => {\n          setLogInFail(false);\n        }}\n        message={`password or username is incorrect`}\n      />\n    </Box>\n  );\n};\n\nexport default LoginPage;\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardActions,\n  Box,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  Stack,\n  Typography,\n} from \"@mui/material\";\nimport { FC, useEffect, useState } from \"react\";\nimport { BOOKING_ROUTE_URL, CHECKIN_ROUTE_URL } from \"../routeUrls\";\nimport { Booking } from \"../types\";\n\nconst UserPage: FC = () => {\n  const [userDeskList, setUserDeskList] = useState<Booking[]>([]);\n  const [recentBooking, setRecentBooking] = useState<Booking>();\n  const user = sessionStorage.getItem(\"activeUser\");\n\n  useEffect(() => {\n    const setDeskList = async () => {\n      if(user){\n        const jsonUser = JSON.parse(user);\n      const desks = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/user/list/${jsonUser.name}`\n      );\n      const desksJson = await desks.json();\n      const allUserDesks: Booking[] = desksJson.userDeskList;\n      setRecentBooking(allUserDesks[allUserDesks.length-1]);\n      allUserDesks.sort((desk1, desk2) => {\n        if (desk1.start_time > desk2.start_time) {\n          return 1;\n        }\n\n        if (desk1.start_time < desk2.start_time) {\n          return -1;\n        }\n\n        return 0;\n      });\n      setUserDeskList(allUserDesks);\n    }\n    };\n    setDeskList();\n  }, [user]);\n\n  const getDateFromNumber = (time: number|undefined) => {\n    if(time){\n    const date = new Date(time * 1000);\n    return date.toLocaleString();\n    }\n    return \"no time found\";\n  };\n\n  return (\n    <Box sx={{ p: { xs: 1, md: 3 }, pt: { xs: 3, md: 3 } }}>\n      <Card\n        elevation={6}\n        className=\"basecard\"\n        sx={{ width: { xs: \"100%\", md: \"900px\" } }}\n      >\n        <CardHeader\n          title={user?`bookings for ${JSON.parse(user).name}`:\"No user found\"}\n          sx={{ textAlign: \"center\" }}\n        />\n        <CardContent>\n          \n          {userDeskList.length <= 0\n              ? \"You haven't booked any desks\"\n              : <Stack spacing={2}>\n                <Typography gutterBottom>\n                These are your booked desks:\n                </Typography>\n               \n            <List style={{ maxHeight: 400, overflow: \"auto\" }}>\n              {userDeskList.map((userDesk) => (\n                <ListItem key={userDesk.booking_id}>\n                  <ListItemText\n                    primary={userDesk.booked_desk}\n                    secondary={` From: ${getDateFromNumber(\n                      userDesk.start_time\n                    )} Till: ${getDateFromNumber(userDesk.end_time)}`}\n                  />\n                </ListItem>\n              ))}\n            </List>\n            This is your most recent booked desk:\n                <Card sx={{ width: { xs: \"50%\" } }}>\n                  <CardHeader title={recentBooking?.booked_desk}/>\n                  <CardContent>\n                  <Typography variant=\"caption\">\n                {` From: ${getDateFromNumber(\n                      recentBooking?.start_time\n                    )} Till: ${getDateFromNumber(recentBooking?.end_time)}`}\n                </Typography>\n                  </CardContent>\n                </Card>\n            </Stack>\n          }\n          \n        </CardContent>\n        <CardActions sx={{ justifyContent: \"space-between\" }}>\n          {userDeskList.length > 0?\n          <Button variant=\"outlined\" color=\"secondary\" href={`${CHECKIN_ROUTE_URL}?${userDeskList[0].booked_desk}`}>\n          {`chekcin desk ${userDeskList[0].booked_desk}`}\n          </Button>: \"\"}\n          <Button variant=\"outlined\" href={BOOKING_ROUTE_URL}>\n          Make new booking\n          </Button>\n        </CardActions>\n      </Card>\n    </Box>\n  );\n};\n\nexport default UserPage;\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardActions,\n  TextField,\n  Stack,\n  Button,\n  Box,\n  Typography,\n} from \"@mui/material\";\nimport { FC, useState } from \"react\";\nimport { LOGIN_ROUTE_URL } from \"../routeUrls\";\n\nconst RegisterPage: FC = () => {\n  const [userName, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const createUser = async () => {\n    if (password === confirmPassword) {\n      const data = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/createUser`,\n        {\n          method: \"PATCH\",\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n          },\n          body: JSON.stringify({\n            name: userName,\n            password,\n            role: \"user\",\n          }),\n        }\n      );\n      const json = await data.json();\n      if (json.isUserCreated) {\n        //TODO create alert when account is made\n        const json = `{\"name\": \"${userName}\", \"role\": \"user\"}`;\n        sessionStorage.setItem(\"activeUser\", json);\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n        return;\n      }\n    }\n    //TODO alert password doesnt match\n  };\n  const areFieldsEmpty = () => {\n    return (\n      userName.length === 0 ||\n      password.length === 0 ||\n      confirmPassword.length === 0\n    );\n  };\n  return (\n    <Box sx={{ p: { xs: 1, md: 3 }, pt: { xs: 3, md: 3 } }}>\n      <Card\n        elevation={6}\n        className=\"basecard\"\n        sx={{ width: { xs: \"100%\", md: \"900px\" } }}\n      >\n        <CardHeader title=\"Register\" sx={{ textAlign: \"center\" }} />\n        <CardContent>\n          <Stack alignItems=\"center\" spacing={4}>\n            <TextField\n              label=\"Email address\"\n              onChange={(event) => setUserName(event.target.value)}\n              sx={{ width: \"25rem\" }}\n            />\n            <TextField\n              label=\"Password\"\n              onChange={(event) => setPassword(event.target.value)}\n              sx={{ width: \"25rem\" }}\n              type=\"password\"\n            />\n            <TextField\n              label=\"Confirm password\"\n              onChange={(event) => setConfirmPassword(event.target.value)}\n              sx={{ width: \"25rem\" }}\n              type=\"password\"\n            />\n            <Button\n              disabled={areFieldsEmpty()}\n              onClick={createUser}\n              variant=\"contained\"\n            >\n              Register\n            </Button>\n          </Stack>\n        </CardContent>\n        <CardActions sx={{ justifyContent: \"flex-end\" }}>\n          <Typography> already an account? </Typography>\n          <Button color=\"primary\" href={LOGIN_ROUTE_URL}>\n            {\" \"}\n            Log in\n          </Button>\n        </CardActions>\n      </Card>\n    </Box>\n  );\n};\n\nexport default RegisterPage;\n","export default __webpack_public_path__ + \"static/media/ordina_logo.7a9a0777.png\";","import {\n  Toolbar,\n  IconButton,\n  AppBar,\n  Typography,\n  Menu,\n  MenuItem,\n  Link,\n} from \"@mui/material\";\nimport AccountBoxIcon from \"@mui/icons-material/AccountBox\";\nimport { FC, useState } from \"react\";\nimport img from \"../images/ordina_logo.png\";\nimport { LOGIN_ROUTE_URL } from \"../routeUrls\";\n\nexport const TopBar: FC = () => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const user = sessionStorage.getItem(\"activeUser\");\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    if (user) {\n      setAnchorEl(event.currentTarget);\n    }\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleLogOut = () => {\n    setAnchorEl(null);\n    sessionStorage.clear();\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar variant=\"dense\" sx={{ gap: \"10px\" }}>\n        <img src={img} alt=\"logo\" style={{ height: \"2.5rem\" }} />\n        <Typography\n          variant=\"h5\"\n          color=\"inherit\"\n          component=\"div\"\n          sx={{ flexGrow: 1, fontSize: { xs: \"10px\", md: \"inherit\" } }}\n        >\n          Smart office management\n        </Typography>\n        {user ? (\n          <Typography variant=\"body1\">{JSON.parse(user).name}</Typography>\n        ) : (\n          \"\"\n        )}\n        <IconButton size=\"large\" color=\"inherit\" onClick={handleClick}>\n          <AccountBoxIcon />\n        </IconButton>\n      </Toolbar>\n      <Menu\n        id=\"user-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          \"aria-labelledby\": \"basic-button\",\n        }}\n      >\n        <MenuItem>\n          <Link href={LOGIN_ROUTE_URL} onClick={handleLogOut}>\n            Log out\n          </Link>\n        </MenuItem>\n      </Menu>\n    </AppBar>\n  );\n};\n","import {createTheme } from '@mui/material/styles';\n\nexport const theme = createTheme({\n    palette: {\n      primary: {\n        main: \"#f58220\",\n        light: \"#e1e1e1\",\n        dark: \"#c46819\"\n      },\n      secondary: {\n        main: \"#007f92\",\n        light: \"#3da4bf\",\n        dark: \"#58595b\"\n      },\n    },\n  });","import { ThemeProvider } from \"@mui/material/styles\";\nimport BookingPage from \"./pages/BookingPage\";\nimport CheckinPage from \"./pages/CheckinPage\";\nimport LoginPage from \"./pages/LoginPage\";\nimport UserPage from \"./pages/UserPage\";\nimport RegisterPage from \"./pages/RegisterPage\";\nimport { TopBar } from \"./components/TopBar\";\nimport { Route, BrowserRouter, Switch, Redirect } from \"react-router-dom\";\nimport { CssBaseline } from \"@mui/material\";\nimport { theme } from \"./theme\";\nimport \"./App.css\";\nimport {\n  BOOKING_ROUTE_URL,\n  CHECKIN_ROUTE_URL,\n  USER_ROUTE_URL,\n  REGISTER_ROUTE_URL,\n} from \"./routeUrls\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <BrowserRouter>\n          <CssBaseline />\n          <TopBar />\n          {sessionStorage.getItem(\"activeUser\") ? (\n            <Switch>\n              <Route path={BOOKING_ROUTE_URL} component={BookingPage}></Route>\n              <Route path={CHECKIN_ROUTE_URL} component={CheckinPage}></Route>\n              <Route path={USER_ROUTE_URL} component={UserPage}></Route>\n              <Route>\n                <Redirect to={USER_ROUTE_URL} />\n              </Route>\n            </Switch>\n          ) : (\n            <Switch>\n              <Route path={REGISTER_ROUTE_URL} component={RegisterPage} />\n              <Route component={LoginPage} />\n            </Switch>\n          )}\n        </BrowserRouter>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}