{"version":3,"sources":["components/TimeSetter.tsx","components/DateSetter.tsx","components/DeskItemButton.tsx","utils.ts","components/AvailableDeskList.tsx","images/plattegrond_ordinaB2.jpg","pages/BookingPage.tsx","components/DeskItem.tsx","components/CheckinDeskList.tsx","pages/CheckinPage.tsx","components/TopBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TimeSetter","title","type","useContext","FormContext","startTime","startTimeValue","setStartTimeValue","endTime","endTimeValue","setEndTimeValue","Card","CardContent","Typography","variant","LocalizationProvider","dateAdapter","AdapterDateFns","TimePicker","value","includes","onChange","newValue","renderInput","params","TextField","DateSetter","date","dateValue","setDateValue","StaticDatePicker","orientation","openTo","DeskItem","desk","selectedDesk","setSelectedDesk","ListItemButton","selected","desk_id","onClick","event","handleListItemClick","isBetween","min","max","getUnixTime","time","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getTime","AvailableDeskList","useState","currentDeskList","setCurrentDeskList","useEffect","setDeskList","a","fetch","process","bookingList","json","jsonBookingList","bookings","bookingsAtTime","filter","booking","unixStartTime","unixEndTime","isBetweenStart","start_time","isBetweenEnd","end_time","data","availableDesks","deskList","find","booked_desk","List","style","maxHeight","overflow","map","React","createContext","BookingPage","open","setOpen","handleBooking","method","headers","body","JSON","stringify","booking_id","now","endtimeValue","store","Provider","Grid","container","spacing","item","xs","src","img","alt","width","height","Button","color","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","DeskItemCheckIn","ListItem","isBookedNow","CheckinDeskList","deskId","desks","desksJson","allDesks","deskIndex","findIndex","getDeskForBooking","currentBookedDesks","bookedDesk","nearbyDesks","otherDesk","otherdDeskIndex","isCurrentlyBooked","distance","CheckinPage","document","location","search","substr","currentDeskState","setCurrentDeskState","setInitialDeskState","deskState","handleToggleChecked","className","Stack","disabled","TopBar","AppBar","position","Toolbar","component","sx","flexGrow","IconButton","size","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2d9a9a8f.chunk.js","sourcesContent":["import { FC, useContext } from \"react\";\nimport { Typography, Card, CardContent, TextField } from \"@mui/material\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport { LocalizationProvider, TimePicker } from \"@mui/lab\";\nimport { FormContext } from \"../pages/BookingPage\";\n\ntype Props = {\n  title: string;\n  type: \"Start\" | \"End\";\n};\n\nexport const TimeSetter: FC<Props> = ({ title, type }) => {\n  const {\n    startTime: [startTimeValue, setStartTimeValue],\n  } = useContext(FormContext);\n  const {\n    endTime: [endTimeValue, setEndTimeValue],\n  } = useContext(FormContext);\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"body2\">{title}</Typography>\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n          <TimePicker\n            value={title.includes(\"Start\") ? startTimeValue : endTimeValue}\n            onChange={(newValue) => {\n              if (!newValue) {\n                return;\n              }\n              if (type === \"Start\") {\n                setStartTimeValue(newValue);\n              }\n              if (type === \"End\") {\n                setEndTimeValue(newValue);\n              }\n            }}\n            renderInput={(params) => <TextField {...params} />}\n          />\n        </LocalizationProvider>\n      </CardContent>\n    </Card>\n  );\n};\n","import { useContext, FC } from \"react\";\nimport { TextField } from \"@mui/material\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport { LocalizationProvider, StaticDatePicker } from \"@mui/lab\";\nimport { FormContext } from \"../pages/BookingPage\";\n\nexport const DateSetter: FC = () => {\n  const {\n    date: [dateValue, setDateValue],\n  } = useContext(FormContext);\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <StaticDatePicker<Date>\n        orientation=\"portrait\"\n        openTo=\"day\"\n        value={dateValue}\n        onChange={(newValue) => {\n          if (newValue) {\n            setDateValue(newValue);\n          }\n        }}\n        renderInput={(params) => <TextField {...params} />}\n      />\n    </LocalizationProvider>\n  );\n};\n","import { ListItemButton } from \"@mui/material\";\nimport { FC, useContext } from \"react\";\nimport { FormContext } from \"../pages/BookingPage\";\nimport { DeskType } from \"../types\";\n\ntype Props = {\n  desk: DeskType;\n};\nexport const DeskItem: FC<Props> = ({ desk }) => {\n  const {\n    desk: [selectedDesk, setSelectedDesk],\n  } = useContext(FormContext);\n  const handleListItemClick = (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    desk: string\n  ) => {\n    setSelectedDesk(desk);\n  };\n  return (\n    <ListItemButton\n      selected={selectedDesk === desk.desk_id}\n      onClick={(event) => handleListItemClick(event, desk.desk_id)}\n      key={desk.desk_id}\n    >\n      {desk.desk_id}\n    </ListItemButton>\n  );\n};\n","export function isBetween(value: number, min: number, max: number) {\n  return value >= min && value <= max;\n}\n\nexport function getUnixTime(date: Date, time: Date) {\n  return (\n    new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n      time.getHours(),\n      time.getMinutes()\n    ).getTime() / 1000\n  );\n}\n","import { List } from \"@mui/material\";\nimport { useState, FC, useEffect, useContext } from \"react\";\nimport { DeskType, Booking } from \"../types\";\nimport { DeskItem } from \"./DeskItemButton\";\nimport { FormContext } from \"../pages/BookingPage\";\nimport { isBetween, getUnixTime } from \"../utils\";\n\nexport const AvailableDeskList: FC = () => {\n  const [currentDeskList, setCurrentDeskList] = useState<DeskType[]>([]);\n  const {\n    startTime: [startTimeValue],\n  } = useContext(FormContext);\n  const {\n    endTime: [endTimeValue],\n  } = useContext(FormContext);\n  const {\n    date: [dateValue],\n  } = useContext(FormContext);\n\n  useEffect(() => {\n    const setDeskList = async () => {\n      const bookingList = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/bookinglist`\n      );\n      const jsonBookingList = await bookingList.json();\n      const bookings: Booking[] = jsonBookingList.bookingList;\n\n      const bookingsAtTime = bookings.filter((booking: Booking) => {\n        const unixStartTime = getUnixTime(dateValue, startTimeValue);\n        const unixEndTime = getUnixTime(dateValue, endTimeValue);\n          const isBetweenStart  = isBetween(booking.start_time, unixStartTime, unixEndTime);\n          const isBetweenEnd = isBetween(booking.end_time, unixStartTime, unixEndTime);\n          return isBetweenStart || isBetweenEnd;\n        });\n\n      const data = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/desk/list`\n      );\n      const json = await data.json();\n\n      const availableDesks = json.deskList.filter((desk: DeskType) => {\n        const isBooked = bookingsAtTime.find((booking: Booking) => booking.booked_desk === desk.desk_id);\n        return !isBooked;\n      });\n      setCurrentDeskList(availableDesks);\n    };\n    setDeskList();\n  }, [endTimeValue, startTimeValue, dateValue]);\n\n  return (\n    <List style={{ maxHeight: 1000, overflow: \"auto\" }}>\n      {currentDeskList.map((desk) => (\n        <DeskItem desk={desk}></DeskItem>\n      ))}\n    </List>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/plattegrond_ordinaB2.007c5b7b.jpg\";","import React, { FC, useState } from \"react\";\nimport { Button, Grid, Snackbar } from \"@mui/material\";\nimport { TimeSetter } from \"../components/TimeSetter\";\nimport { DateSetter } from \"../components/DateSetter\";\nimport { AvailableDeskList } from \"../components/AvailableDeskList\";\nimport img from \"../images/plattegrond_ordinaB2.jpg\";\nimport { getUnixTime } from \"../utils\";\n\nexport const FormContext = React.createContext<any>(null);\n\nconst BookingPage: FC = () => {\n  const [open, setOpen] = useState(false);\n\n  const handleBooking = async () => {\n    const data = await fetch(`${process.env.REACT_APP_ROOT_URL}api/book`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n      body: JSON.stringify({\n        booking_id: `booking ${selectedDesk}.${Date.now()}`,\n        start_time: getUnixTime(dateValue, startTimeValue),\n        end_time: getUnixTime(dateValue, endtimeValue),\n        booked_desk: selectedDesk,\n      }),\n    });\n    const json = await data.json();\n    if (json.booking) {\n      setOpen(true);\n    }\n  };\n\n  const [startTimeValue, setStartTimeValue] = useState<Date>(new Date());\n  const [endtimeValue, setEndTimeValue] = useState<Date>(new Date());\n  const [dateValue, setDateValue] = useState<Date>(new Date());\n  const [selectedDesk, setSelectedDesk] = useState(\"\");\n  const store = {\n    startTime: [startTimeValue, setStartTimeValue],\n    endTime: [endtimeValue, setEndTimeValue],\n    date: [dateValue, setDateValue],\n    desk: [selectedDesk, setSelectedDesk],\n  };\n  return (\n    <FormContext.Provider value={store}>\n      <div>\n        <Grid container spacing={2}>\n          <Grid item xs={8}>\n            <h3>layout picture</h3>\n            <img src={img} alt=\"layout img\" width={1500} height={600} />\n            <Grid container spacing={2}>\n              <Grid item xs={6}>\n                <DateSetter />\n              </Grid>\n              <Grid item xs={6}>\n                <TimeSetter title={\"Start time\"} type={\"Start\"} />\n                <TimeSetter title={\"End time\"} type={\"End\"} />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={4}>\n            <h3>list available desks</h3>\n            <AvailableDeskList />\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={handleBooking}\n            >\n              Book\n            </Button>\n          </Grid>\n        </Grid>\n        <Snackbar\n          anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n          open={open}\n          autoHideDuration={6000}\n          onClose={() => {\n            setOpen(false);\n          }}\n          message={`Your booking for desk ${selectedDesk} was succesful`}\n        />\n      </div>\n    </FormContext.Provider>\n  );\n};\nexport default BookingPage;\n","import { ListItem } from \"@mui/material\";\nimport { FC } from \"react\";\nimport { DeskType } from \"../types\";\n\ntype Props = {\n  desk: DeskType;\n};\nexport const DeskItemCheckIn: FC<Props> = ({ desk }) => {\n  return <ListItem key={desk.desk_id}>{desk.desk_id}</ListItem>;\n};\n","import { List } from \"@mui/material\";\nimport { useState, FC, useEffect } from \"react\";\nimport { DeskType, Booking } from \"../types\";\nimport { DeskItemCheckIn } from \"./DeskItem\";\nimport { isBetween } from \"../utils\";\n\ntype Props = {\n  deskId: string;\n};\nconst OFFSET_AVAILABLE_DESKS = 2\n\nconst isBookedNow = (booking: Booking) => {\n  return (\n    isBetween(Date.now() / 1000, booking.start_time, booking.end_time)\n  );\n};\n\nexport const CheckinDeskList: FC<Props> = ({ deskId }) => {\n  const [currentDeskList, setCurrentDeskList] = useState<DeskType[]>([]);\n\n  useEffect(() => {\n    const setDeskList = async () => {\n      const desks = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/desk/list`\n      );\n      const desksJson = await desks.json();\n      const allDesks: DeskType[] = desksJson.deskList;\n\n      const bookingList = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/bookinglist`\n      );\n      const jsonBookingList = await bookingList.json();\n      const bookings: Booking[] = jsonBookingList.bookingList;\n\n      const deskIndex = allDesks.findIndex((desk) => desk.desk_id === deskId);\n      const getDeskForBooking = (booking:Booking) => allDesks.find((desk) => desk.desk_id === booking.booked_desk); \n      const currentBookedDesks = bookings.filter(isBookedNow).map(getDeskForBooking);\n\n      if(currentBookedDesks.find((bookedDesk) => bookedDesk?.desk_id === deskId)){\n        const nearbyDesks = allDesks.filter((otherDesk, otherdDeskIndex) => {\n          const isCurrentlyBooked = currentBookedDesks.find((bookedDesk) => bookedDesk?.desk_id === otherDesk.desk_id)\n          const isSameDesk = deskIndex === otherdDeskIndex;\n          const distance = deskIndex - otherdDeskIndex;\n          const isInRange = distance >= -OFFSET_AVAILABLE_DESKS && distance <= OFFSET_AVAILABLE_DESKS;\n          return !isSameDesk && isInRange && !isCurrentlyBooked;  \n        });\n        setCurrentDeskList(nearbyDesks);\n      }\n    };\n    setDeskList();\n  }, [deskId]);\n\n  return (\n    <List style={{ maxHeight: 200, overflow: \"auto\" }}>\n      {currentDeskList.map((desk) => (\n        <DeskItemCheckIn desk={desk}></DeskItemCheckIn>\n      ))}\n    </List>\n  );\n};\n","import { Stack, Button, Snackbar } from \"@mui/material\";\nimport { useState, FC, useEffect } from \"react\";\nimport { CheckinDeskList } from \"../components/CheckinDeskList\";\n\nconst CheckinPage: FC = () => {\n  const deskId = document.location.search.substr(1);\n  const [currentDeskState, setCurrentDeskState] = useState(\"free\");\n  const [open, setOpen] = useState(false);\n\n\n  useEffect(() => {\n    const setInitialDeskState = async () => {\n      const data = await fetch(\n        `${process.env.REACT_APP_ROOT_URL}api/desk/${deskId}`\n      );\n      const json = await data.json();\n      setCurrentDeskState(json.deskState);\n    };\n    setInitialDeskState();\n  }, [deskId]);\n\n  const handleToggleChecked = async () => {\n    const data = await fetch(\n      `${process.env.REACT_APP_ROOT_URL}api/desk/${deskId}`,\n      {\n        method: \"PATCH\",\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\",\n        },\n        body: JSON.stringify({\n          deskState: currentDeskState,\n          deskId: deskId,\n        }),\n      }\n    );\n    const json = await data.json();\n    setCurrentDeskState(json.deskState);\n    setOpen(true);\n  };\n\n  return (\n    <div className=\"CheckinPage\">\n      <Stack spacing={2}>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          disabled={currentDeskState === \"unavailable\"}\n          onClick={handleToggleChecked}\n        >\n          check in/ uit\n        </Button>\n        <CheckinDeskList deskId={deskId} />\n      </Stack>\n      <Snackbar\n          anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n          open={open}\n          autoHideDuration={6000}\n          onClose={() => {\n            setOpen(false);\n          }}\n          message={currentDeskState === \"free\" ? \"uitgechecked\" : \"ingechecked\"}\n        />\n    </div>\n  );\n};\n\nexport default CheckinPage;\n","import { Toolbar, IconButton, AppBar, Typography } from \"@mui/material\";\nimport AccountBoxIcon from \"@mui/icons-material/AccountBox\";\nimport React, { FC } from \"react\";\n\nexport const TopBar: FC = () => {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar variant=\"dense\">\n        <Typography\n          variant=\"h6\"\n          color=\"inherit\"\n          component=\"div\"\n          sx={{ flexGrow: 1 }}\n        >\n          Username\n        </Typography>\n        <IconButton size=\"large\" color=\"inherit\">\n          <AccountBoxIcon />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import './App.css';\nimport BookingPage from './pages/BookingPage';\nimport CheckinPage from './pages/CheckinPage';\nimport {TopBar} from './components/TopBar';\nimport {Route} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TopBar/>\n      <Route path=\"/desks/book\" component={BookingPage}/>\n      <Route path=\"/desks/checkin\" component={CheckinPage}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}